<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试用例设计总结</title>
      <link href="/2019/10/18/%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/10/18/%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-测试流程"><a href="#1-测试流程" class="headerlink" title="1.测试流程"></a>1.测试流程</h2><p>需求分析—测试需求—测试计划–测试方案—测试用例—执行测试—测试报告</p><h2 id="2-测试用例的特性"><a href="#2-测试用例的特性" class="headerlink" title="2.测试用例的特性"></a>2.测试用例的特性</h2><ul><li>有效性：能使用，不同人使用结果一致（测试用例的能够被使用，且被不同人员使用测试结果一致）</li><li>可复用性：良好的测试用例具有重复使用的功能</li><li>易组织性：好的测试用例会分门别类地提供给测试人员参考和使用</li><li>可评估性：从测试管理的角度，测试用例的通过率和软件缺陷的数目是软件产品质量好坏的测试标准（测试计划）</li><li>可管理性：测试用例可以作为检验测试人员进度、工作量以及跟踪/管理测试人员工作效率的因素（对测试人员进行工作量和绩效考核）</li></ul><h2 id="3-测试用例的八大要素"><a href="#3-测试用例的八大要素" class="headerlink" title="3.测试用例的八大要素"></a>3.测试用例的八大要素</h2><p>①测试编号<br>②测试模块<br>③测试标题<br>④测试级别<br>⑤测试环境<br>⑥测试输入<br>⑦测试步骤<br>⑧预期结果</p><ul><li><p>测试编号：每个测试用例都有唯一的标识号，用以区别其他测试用例<br><i style="color:red">例</i>：系统测试用例的编号这样定义规则： PROJECT1-ST-001 ，命名规则是项目名称＋测试阶段类型（系统测试阶段）＋编号</p></li><li><p>测试模块：指明并简单描述本测试用例是用来测试哪些项目、子项目或软件特性的<br><i style="color:red">例</i>：购物模块</p></li><li><p>测试标题：对测试用例的描述，测试用例标题应该清楚表达测试用例的用途<br><i style="color:red">例</i>：“ 测试用户登录时输入错误密码时，软件的响应情况 ”</p></li><li><p>测试级别：定义测试用例的优先级别，可以粗略地分为 “ 高 ” 和 “ 低 ” 两个级别<br><i style="color:red">例</i>： 核心功能 —高      界面风格 —低</p></li><li><p>测试环境：描述执行测试用例所需要的具体测试环境，包括硬件环境和软件环境<br><i style="color:red">例</i>： 硬件 ——计算机的具体配置，见测试计划；软件——操作系统  linux    数据库   mysql     中间件  weblogic</p></li><li><p>测试输入：用来执行测试用例的输入要求。这些输入可能是数据、文件或具体操作<br><i style="color:red">例</i>： 数据  ：  12  文件  ：   D:\baidu\文件couture         动作  ：  单击鼠标，在键盘做按键处理</p></li><li><p>测试步骤：执行本测试用例所需的每一步操作<br><i style="color:red">例</i>： 求和运算          输入加数12          输入被加数 24          点击“加法按钮”</p></li><li><p>预期结果：描述被测项目或被测特性所希望或要求达到的输出或指标<br><i style="color:red">例</i>：  加法器    12+24          预期结果：  36</p></li></ul><h2 id="4-测试用例操作步骤"><a href="#4-测试用例操作步骤" class="headerlink" title="4.测试用例操作步骤"></a>4.测试用例操作步骤</h2><p><strong>1.</strong>设计一个新的测试用例，使其尽可能多地覆盖尚未被覆盖的有效等价类，重复这个过程，直至所有的有效等价类均被测试用例所覆盖</p><p><strong>2.</strong>设计一个新的测试用例，使其仅覆盖一个无效等价类，重复这个过程，直至所有的无效等价类均被测试用例所覆盖</p><p><strong>3.</strong>设计数据要注意<br>        ①无效等价类在一个用例中只能出现一次<br>        ②有效等价类在一个用例中可以出现多次<br><strong>4.</strong>等价类划分技巧<br>        ①测试用例分析最好用xmind<br>        ②按等价类给出数据最好用电子表格<br>        ③当产生意见分歧，回看需求规格说明书</p><h2 id="5-软件测试用例方法"><a href="#5-软件测试用例方法" class="headerlink" title="5.软件测试用例方法"></a>5.软件测试用例方法</h2><p>1.输出域       覆盖所有的输出，不管输入<br>2.输入域       覆盖所有的输入，不管输出<br>3.异常分析法： 断电，断网的异常情况（重点关注）<br>4.错误猜测法： 有经验的人对系统做出判断，找到肯能出现错误的地方<br>5.探索性测试： 根据自己的测试经验，尝试性测试系统功能<br>6.因果图<br>7.场景法     流程有序<br>8.状态迁移   状态无序<br>9.正交试验   多条件组合，不予许出现负值<br>10.判定表    多条件组合，可以出现负值<br>11.边界值<br>12.等价类<br>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/96853248" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/96853248</a></p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试流程 </tag>
            
            <tag> 用例特性 </tag>
            
            <tag> 用例要素 </tag>
            
            <tag> 用例步骤 </tag>
            
            <tag> 用例方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个Python程序(全面)</title>
      <link href="/2019/10/11/%E7%AC%AC%E4%B8%80%E4%B8%AAPython%E7%A8%8B%E5%BA%8F(%E5%85%A8%E9%9D%A2)/"/>
      <url>/2019/10/11/%E7%AC%AC%E4%B8%80%E4%B8%AAPython%E7%A8%8B%E5%BA%8F(%E5%85%A8%E9%9D%A2)/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Windows系统"><a href="#一-Windows系统" class="headerlink" title="一.Windows系统"></a>一.Windows系统</h1><h2 id="1-编写Python程序方式之Sublime文本编辑器"><a href="#1-编写Python程序方式之Sublime文本编辑器" class="headerlink" title="1.编写Python程序方式之Sublime文本编辑器:"></a>1.编写Python程序方式之Sublime文本编辑器:</h2><p>1&gt;打开sublime,创建hello.py文件,打印hello python<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello python"</span>)</span><br></pre></td></tr></table></figure><p>注：在Sublime编辑器中运行Python程序(Ctrl+B)记得要先保存才可以运行程序，不然会报错<br>​​​​​​​​​​​​​​<fancybox><br><img src="https://img-blog.csdnimg.cn/20191011132627704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br></fancybox></p><h2 id="2-编写Python程序方式之Python交互模式-IDE-IDLE"><a href="#2-编写Python程序方式之Python交互模式-IDE-IDLE" class="headerlink" title="2.编写Python程序方式之Python交互模式-IDE-IDLE:"></a>2.编写Python程序方式之Python交互模式-IDE-IDLE:</h2><p>注：当安装完Python后，在安装目录下和windows开始菜单栏下就会有IDLE(IDLE是开发 Python 程序的基本IDE（集成开发环境），具备基本的IDE的功能)</p><p>1&gt;在windows开始菜单中打开IDLE<br><img src="https://img-blog.csdnimg.cn/20191011133943918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2&gt;在弹出的Python Shell窗口输入行中，打印出人生苦短 我用Python这句经典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"人生苦短 我用Python"</span>)</span><br></pre></td></tr></table></figure><p>注：命令行显示有符号(&gt;&gt;&gt;)代表你已进入Python交互模式(Enter回车即可运行代码)</p><p>提示窗口如下：<br><img src="https://img-blog.csdnimg.cn/20191011134109204.png" alt="在这里插入图片描述"><br>3&gt;在Windows提示符cmd中也可以进入Python交互模式(以管理员身份运行cmd)</p><p>注：如果在窗口命令下输入python成功进入交互模式，代表python安装成功并且将python添加到环境变量Path中<br><img src="https://img-blog.csdnimg.cn/20191011134817401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>添加环境变量：</p><p>右击计算机属性—高级系统设置—高级—打开环境变量—编辑用户变量栏下的PATH变量<br><img src="https://img-blog.csdnimg.cn/20191011134900359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>复制python安装路径，在最后面粘贴记得以;分割</p><p>注：不要复制我的路径，找到你自己安装python的路径，在变量值末尾处添加，！！！切记前面加英文分号;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;D:\Python\Python36\</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191011135604238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-编写Python程序方式之PyCharm-IDE"><a href="#3-编写Python程序方式之PyCharm-IDE" class="headerlink" title="3.编写Python程序方式之PyCharm(IDE)"></a>3.编写Python程序方式之PyCharm(IDE)</h2><p>简介：PyCharm是由JetBrains打造的一款Python IDE，VS2010的重构插件<a href="https://baike.baidu.com/item/Resharper" target="_blank" rel="noopener">Resharper</a>就是出自<a href="https://baike.baidu.com/item/JetBrains" target="_blank" rel="noopener">JetBrains</a>之手。</p><p>特点：</p><p>首先，PyCharm拥有一般<a href="https://baike.baidu.com/item/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/298524?fromtitle=IDE&fromid=8232086" target="_blank" rel="noopener">IDE</a>具备的功能，比如， 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制</p><p>另外，PyCharm还提供了一些很好的功能用于Django开发，同时支持Google App Engine，更酷的是，PyCharm支持<a href="https://baike.baidu.com/item/IronPython" target="_blank" rel="noopener">IronPython</a>。</p><p>1&gt;官网windows下载地址：<a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">链接</a></p><p>2&gt;下载安装完成后，打开PyCharm程序</p><p>3&gt;创建项目：<br><img src="https://img-blog.csdnimg.cn/20191011135821786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4&gt;点击Create创建项<br><img src="https://img-blog.csdnimg.cn/20191011135906508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5&gt;右击项目名untitled，New—Python File 创建一个python文件<br><img src="https://img-blog.csdnimg.cn/20191011140002423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6&gt;创建一个hello.py文件<br><br><img src="https://img-blog.csdnimg.cn/20191011140040197.png" alt="在这里插入图片描述"><br>7&gt;编写hello.py文件打印人生苦短 我用python这句话<br>补充：python2x版本打印时不需要加(),而python3x需要加括号<br><img src="https://img-blog.csdnimg.cn/20191011140129564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>说明：在windows环境中编写Python代码的方式不止是这些，我个人偏向这几种</strong></p><h1 id="二-Linux系统-ubuntu"><a href="#二-Linux系统-ubuntu" class="headerlink" title="二.Linux系统(ubuntu)"></a>二.Linux系统(ubuntu)</h1><h2 id="1-编写Python程序方式之Vim-编辑器之神-vim"><a href="#1-编写Python程序方式之Vim-编辑器之神-vim" class="headerlink" title="1.编写Python程序方式之Vim(编辑器之神-vim)"></a>1.编写Python程序方式之Vim(编辑器之神-vim)</h2><p>简介：Vim是一个类似于<a href="https://baike.baidu.com/item/Vi/8987313" target="_blank" rel="noopener">Vi</a>的著名的功能强大、高度可定制的<a href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/8853160" target="_blank" rel="noopener">文本编辑器</a>，在Vi的基础上改进和增加了很多特性。</p><p>1&gt;vi命令：键盘操作(h:左 j:下 k:上 l:右)<br><img src="https://img-blog.csdnimg.cn/20191011140401799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2&gt;vi命令：模式<br><img src="https://img-blog.csdnimg.cn/20181210123521971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt><br>3&gt;vi命令：图解<br><fancybox><br><img src="https://img-blog.csdnimg.cn/20181210123719189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt><br></fancybox><br>4&gt;通过vi hello.py 创建并编写hello.py文件<br><img src="https://img-blog.csdnimg.cn/20181210130336921.png" alt><br>5&gt;Enter回车进入编辑界面，按 i 进入编写模式编写代码<br><img src="https://img-blog.csdnimg.cn/20181210130702304.png" alt><br>6&gt;保存 按Esc进入末行模式，输入:x敲回车则保存并退出<br><img src="https://img-blog.csdnimg.cn/20181210130239145.png" alt><br>7&gt;保存退出后回到ubuntu命令终端，输入python hello.py(按Tab自动补全)执行python文件<br>注：ubuntu系统中默认安装python2.7和python3.5两个版本，非常方便<br><img src="https://img-blog.csdnimg.cn/20181210131340433.png" alt></p><h2 id="2-编写Python程序方式之gedit编辑器"><a href="#2-编写Python程序方式之gedit编辑器" class="headerlink" title="2.编写Python程序方式之gedit编辑器"></a>2.编写Python程序方式之gedit编辑器</h2><p>简介：gedit是一个Linux环境下的文本编辑器，类似windows下的写字板程序，在不需要特别复杂的编程环境下，作为基本的文本编辑器比较合适</p><p>1&gt;ubuntu命令终端输入gedit say_hello.py<br><img src="https://img-blog.csdnimg.cn/20181210132730642.png" alt><br>2&gt;回车进行代码编写<br><img src="https://img-blog.csdnimg.cn/20181210133202172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></p><h2 id="说明-Ubuntu中也可以使用Pycharm-IDE-下载安装Linux系统的即可，新手入手linux建议从Ubuntu和CentOS入手"><a href="#说明-Ubuntu中也可以使用Pycharm-IDE-下载安装Linux系统的即可，新手入手linux建议从Ubuntu和CentOS入手" class="headerlink" title="说明:Ubuntu中也可以使用Pycharm(IDE)下载安装Linux系统的即可，新手入手linux建议从Ubuntu和CentOS入手"></a>说明:Ubuntu中也可以使用Pycharm(IDE)下载安装Linux系统的即可，新手入手linux建议从Ubuntu和CentOS入手</h2><p>Ubuntu官网下载地址：<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">点这里跳转到下载页面</a></p><p>就先写这么多吧，博主要开始搬砖啦~<br><fancybox><br><img src="https://img-blog.csdnimg.cn/20181210134019146.gif" alt><br></fancybox><br>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/84934224" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/84934224</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Sublime </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2019/10/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">U2FsdGVkX19G25Q/VnN7v2iHLGnnCbhU9RlwLAdSgDbzjFLG+SjPw2LWtnm9hY8mzQHJkaTak9v37bfFGTTzNLGDb8p374KZ59CQjQb22pZF+Gt4BQVMdCwpaJXsgTqG3AEA1RchfnsnB9JzW9N54LWZd3O/VIJfpa97bIYxUHCKKOy4H8G31Xv8+30f+MxO</div><div id="enc_passwd"> <input id="enc_pwd_input" placeholder="请输入密码后阅读" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "密码错误!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
