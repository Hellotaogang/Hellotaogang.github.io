<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flask项目之手机端租房网站的实战开发（十）</title>
      <link href="/2019/11/04/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E5%8D%81%EF%BC%89/"/>
      <url>/2019/11/04/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E5%8D%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶区县信息前端编写"><a href="#一丶区县信息前端编写" class="headerlink" title="一丶区县信息前端编写"></a>一丶区县信息前端编写</h1><p>1.分析，当用户进入发布新房源，页面加载完毕即向后端发送请求拿取数据库中的区域信息数据，显示在页面上所在区县栏</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190116183638471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>2.所以需在此页面newhouse.js中进行如下编写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当页面加载完成时，想后端获取区县信息</span></span><br><span class="line">$.<span class="keyword">get</span>("/api/v1.0/areas", function (resp) &#123;</span><br><span class="line">    <span class="keyword">if</span> (resp.errno == <span class="string">"0"</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> areas = resp.data;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;areas.length; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> area = areas[i]</span><br><span class="line">            $(<span class="string">"#area-id"</span>).append(<span class="string">'&lt;option value="'</span>+area.aid+<span class="string">'"&gt;'</span>+area.aname+<span class="string">'&lt;/option&gt;'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        alert(resp.errmsg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">"json"</span>)</span><br></pre></td></tr></table></figure><p>3.当通过js向后端获取区域信息全部对象，通过循环遍历获取每个对象，将每个对象中的aid以及aname通过append方式追加到id为area_id的select标签下，所以最后需要在newhouse.html中将原有的option标签删除</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"area-id"</span> <span class="attr">name</span>=<span class="string">"area_id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="1"&gt;锦江区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="2"&gt;青羊区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="3"&gt;金牛区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="4"&gt;武侯区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="5"&gt;成华区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="6"&gt;龙泉驿区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="7"&gt;青白江区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="8"&gt;新都区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="9"&gt;温江区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="10"&gt;郫都区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="11"&gt;双流区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="12"&gt;高新区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="13"&gt;天府新区&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="14"&gt;新津县&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="15"&gt;大邑县&lt;/option&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;option value="16"&gt;金堂县&lt;/option&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.测试，重新启动程序，清除页面缓存，查看发布房源页面中的所有区县栏是否有数据，此时显示的区县数据，就是从后端数据库获取的</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190116190644439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>5.查看网页Network，从api/v1.0/area接口获取的数据</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190116191023549.png" alt></fancybox></p><p>6.当前端页面需要从后端拿取很多数据时候，如果用上面的方式通过jquery想后端获取数据，再填充到标签中，这样就太麻烦了，所以这里需要在前端去引入一个js模板，来帮助我们更快的完成页面数据的填充</p><ul><li><strong>step1</strong> 比如在房间信息详情页面，需要很多数据</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190116192120663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 使用art_template前端js模板来帮助我们解决此问题 <a href="https://aui.github.io/art-template/zh-cn/index.html" target="_blank" rel="noopener">https://aui.github.io/art-template/zh-cn/index.html</a></li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190116192522100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>7.将发布新房源页面中的所在区县栏使用前端js模板进行改写</p><ul><li><strong>step1</strong> 在newhouse.html中引入template.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/static/js/template.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">step2 在newhouse.html中定义模板</span><br><span class="line">&lt;script type=<span class="string">"text/html"</span> id=<span class="string">"areas-template"</span>&gt;</span><br><span class="line">    &#123;&#123; each areas <span class="keyword">as</span> area &#125;&#125;</span><br><span class="line">    &lt;option value=<span class="string">"&#123;&#123;area.aid&#125;&#125;"</span>&gt;&#123;&#123;area.aname&#125;&#125;&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123; /</span>each &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt; </span></span><br><span class="line"><span class="regexp">```  </span></span><br><span class="line"><span class="regexp">- **step3** 在newhouse.js中使用js模板</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">```javascript</span></span><br><span class="line"><span class="regexp">var html_text =template("areas-template", &#123;areas:areas&#125;);</span></span><br><span class="line"><span class="regexp">$("#area-id").html(html_text)</span></span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 测试，清除缓存，刷新网页，查看结果使用js模板成功</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190116203456403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="二丶发布新房源后端接口编写"><a href="#二丶发布新房源后端接口编写" class="headerlink" title="二丶发布新房源后端接口编写"></a>二丶发布新房源后端接口编写</h1><p>1.流程分析，在发布房源前端文件newhouse.html中将该页面下的上传图片栏隐藏了#form-house-image，当用户完成先关填写后，该上传房屋图片表单才会显示出来</p><ul><li><strong>step1</strong> 在浏览器开发端进行显示</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190118084506991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 查看发布房源界面</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/2019011808463590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>2.在house.py中进行房屋信息接口编写</p><ul><li><strong>step1</strong> 创建视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.route("/houses/info", methods=["POST"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_house_info</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    保存房屋信息</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 获取数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_id = g.user_id</span><br><span class="line">house_data = request.get_json()</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 从获取的data数据中拿取必填字段的值，facility配套设施可能啥都没有，前端就会传个空列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">title = house_data.get(<span class="string">"title"</span>)  <span class="comment"># 房屋名称标题</span></span><br><span class="line">price = house_data.get(<span class="string">"price"</span>)  <span class="comment"># 房屋单价</span></span><br><span class="line">area_id = house_data.get(<span class="string">"area_id"</span>)  <span class="comment"># 房屋所属城区的编号</span></span><br><span class="line">address = house_data.get(<span class="string">"address"</span>)  <span class="comment"># 房屋地址</span></span><br><span class="line">room_count = house_data.get(<span class="string">"room_count"</span>)  <span class="comment"># 房屋包含的房间数目</span></span><br><span class="line">acreage = house_data.get(<span class="string">"acreage"</span>)  <span class="comment"># 房屋面积</span></span><br><span class="line">unit = house_data.get(<span class="string">"unit"</span>)  <span class="comment"># 房屋布局（几室几厅)</span></span><br><span class="line">capacity = house_data.get(<span class="string">"capacity"</span>)  <span class="comment"># 房屋容纳人数</span></span><br><span class="line">beds = house_data.get(<span class="string">"beds"</span>)  <span class="comment"># 房屋卧床数目</span></span><br><span class="line">deposit = house_data.get(<span class="string">"deposit"</span>)  <span class="comment"># 押金</span></span><br><span class="line">min_days = house_data.get(<span class="string">"min_days"</span>)  <span class="comment"># 最小入住天数</span></span><br><span class="line">max_days = house_data.get(<span class="string">"max_days"</span>)  <span class="comment"># 最大入住天数</span></span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 校验参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> all([title, price, area_id, address, room_count, acreage, unit,capacity, beds, deposit, min_days, max_days]):</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.PARAMERR, errmsg=<span class="string">"参数不完整"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 判断用户输入的房屋单价和押金是否为正确参数，通过存入数据库字段单位分，如果用户输入的值不能转换为float和int类型，说明参数错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    price = int(float(price)*<span class="number">100</span>)</span><br><span class="line">    deposit = int(float(deposit)*<span class="number">100</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.PARAMERR, errmsg=<span class="string">"参数错误"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step6</strong> 判断区县id是否存在</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    area = Area.query.get(area_id)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"数据库异常"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step7</strong> 如果在数据库中查询不到区域信息，表示区县信息有误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> area <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.NODATA, errmsg=<span class="string">"区县信息有误"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step8</strong> 保存房屋信息到数据库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">house = House(</span><br><span class="line">    user_id = user_id,</span><br><span class="line">    title = title,</span><br><span class="line">    price = price,</span><br><span class="line">    area_id = area_id,</span><br><span class="line">    address = address,</span><br><span class="line">    room_count = room_count,</span><br><span class="line">    acreage = acreage,</span><br><span class="line">    unit = unit,</span><br><span class="line">    capacity = capacity,</span><br><span class="line">    beds = beds,</span><br><span class="line">    deposit = deposit,</span><br><span class="line">    min_days = min_days,</span><br><span class="line">    max_days = max_days</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>step9</strong> 获取设备设施数据id值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">facility_ids = house_data.get(<span class="string">"facility"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step10</strong> 对获取设备设施字段的值进行判断,下判断这个值存不存在，当用户勾选设备设施时，举例facility_ids值为[2,4]</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> facility_ids:</span><br><span class="line">    <span class="comment"># 通过Facility类中的id值使用in_方法查询其中的id</span></span><br><span class="line">    <span class="comment"># select * from ih_facility_info where id in facility_ids;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        facilities = Facility.query.filter(Facility.id.in_(facility_ids)).all()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        current_app.logger.error(e)</span><br><span class="line">        <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"数据库异常"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step11</strong> 判断查询的每个facility对象是否存在,存在则保存设施数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> facilities:</span><br><span class="line">    house.facilities = facilities</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        db.session.add(house)</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        current_app.logger.error(e)</span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"保存数据异常"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step12</strong> 返回正确响应内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> jsonify(errno=RET.OK, errmsg=<span class="string">"OK"</span>, data=&#123;<span class="string">"house_id"</span>:house.id&#125;)</span><br></pre></td></tr></table></figure><p>3.上传房屋图片接口编写</p><ul><li><strong>step1</strong> 定义视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.route("/houses/image", methods=["POST"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_house_image</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""保存房屋图片"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 获取图片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image_file = request.files.get(<span class="string">"house_image"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 获取图片id</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">house_id = request.form.get(<span class="string">"house_id"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 校验参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> all([image_file, house_id]):</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.PARAMERR, errmsg=<span class="string">"参数错误"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 判断房屋是否在，存在才上传到七牛，如果不存在就不上传</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    house = House.query.get(house_id)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"数据库异常"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step6</strong> house对象不存在则返回错误信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> house <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.NODATA, errmsg=<span class="string">"房屋不存在"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step7</strong> 获取图片二进制数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image_data = image_file.read()</span><br></pre></td></tr></table></figure><ul><li><strong>step8</strong> 将图片保存到七牛中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file_name = storage(image_data)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.THIRDERR, errmsg=<span class="string">"上传图片失败"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step9</strong> 保存图片信息到数据库中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">house_image = HouseImage(house_id=house_id, url=file_name)</span><br><span class="line">db.session.add(house_image)</span><br></pre></td></tr></table></figure><ul><li><strong>step10</strong> 当house对象中的index_image_url不存在时，设置网站主页房屋图片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> house.index_image_url:</span><br><span class="line">    house.index_image_url = file_name</span><br><span class="line">    db.session.add(house)</span><br></pre></td></tr></table></figure><ul><li><strong>step11</strong> 提交到数据库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    db.session.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    db.session.rollback()</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"保存图片异常"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step12</strong> 拼接图片完整url，最后返回正确响应数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image_url = constants.QINIU_URL_DOMAIN + file_name</span><br><span class="line"><span class="keyword">return</span> jsonify(errno=RET.OK, errmsg=<span class="string">"OK"</span>, data=&#123;<span class="string">"image_url"</span>:image_url&#125;)</span><br></pre></td></tr></table></figure><h1 id="三丶发布新房源前端编写"><a href="#三丶发布新房源前端编写" class="headerlink" title="三丶发布新房源前端编写"></a>三丶发布新房源前端编写</h1><p>1.在newhouse.js中进行提交房屋信息表单事件编写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#form-house-info"</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>step1</strong> 阻止表单默认行为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.preventDefault();</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 处理表单数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">$(<span class="string">"#form-house-info"</span>).serializeArray().map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; data[x.name] = x.value &#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 收集用户勾选的设备id</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> facility = [];</span><br><span class="line">$(<span class="string">":checked[name=facility]"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, x</span>) </span>&#123;facility[index] = $(x).val()&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 将收集到的用户勾选id存到data数据库里的facility属性中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> facility = [];</span><br><span class="line">$(<span class="string">":checked[name=facility]"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, x</span>) </span>&#123;facility[index] = $(x).val()&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 通过ajax方式向后端接口发送请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"/api/v1.0/houses/info"</span>,</span><br><span class="line">    type:<span class="string">"post"</span>,</span><br><span class="line">    contentType:<span class="string">"application/json"</span>,</span><br><span class="line">    data:<span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">    dataType:<span class="string">"json"</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">        <span class="string">"X-CSRFToken"</span>: getCookie(<span class="string">"csrf_token"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resp.errno == <span class="string">"4101"</span>)&#123;</span><br><span class="line">            location.href = <span class="string">"/login.html"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resp.errno == <span class="string">"0"</span>)&#123;</span><br><span class="line">            <span class="comment">// 将设备设施表单隐藏</span></span><br><span class="line">            $(<span class="string">"#form-house-info"</span>).hide();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 将上传房屋图片表单显示</span></span><br><span class="line">            $(<span class="string">"#form-house-image"</span>).show();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 设置上传房屋图片表单中的house_id</span></span><br><span class="line">            $(<span class="string">"#house-id"</span>).val(resp.data.house_id);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            alert(resp.errmsg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">"json"</span>)</span><br></pre></td></tr></table></figure><p>2.在newhouse.js中进行上传房屋图片表单事件编写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#form-house-image"</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>step1</strong> 阻止表单默认行为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.preventDefault();</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 利用jquery.form.min.js插件通过的ajaxSubmit对表单进行异步提交，当后端返回正确响应时， 往class 为 house-image-cons div标签下去添加img标签，该div下的img标签为用户上传图片的标签，上传一个图片则在此div下追加一个img标签</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).ajaxSubmit(&#123;</span><br><span class="line">    url:<span class="string">"/api/v1.0/houses/image"</span>,</span><br><span class="line">    type:<span class="string">"post"</span>,</span><br><span class="line">    dataType:<span class="string">"json"</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">        <span class="string">"X-CSRFToken"</span>: getCookie(<span class="string">"csrf_token"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(resp.errno == <span class="string">"4101"</span>)&#123;</span><br><span class="line">            location.href = <span class="string">"/login.html"</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (resp.errno == <span class="string">"0"</span>)&#123;</span><br><span class="line">            <span class="comment">// 往class 为 house-image-cons div标签下去添加img标签</span></span><br><span class="line">            $(<span class="string">".house-image-cons"</span>).append(<span class="string">'&lt;img src="'</span> + resp.data.image_url+<span class="string">'"&gt;'</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            alert(resp.errmsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>四丶测试接口<br>1.运行项目，清除浏览器缓存，刷新网页，进入发布房源，博主这里使用的FS截图工具进行滚动窗口截图</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190118170036647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>2.填写房屋信息</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190118170831661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>3.填写完数据后，点击发布房源信息，逻辑成功则显示上传房屋图片界面</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190118170937556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>查看数据库ih_house_info房屋信息表，数据显示为刚填写的表单勾选数据，此时并没有上传图片所以index_image_url为空</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190118175751791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>4.点击选择文件，选择桌面上的图片后，再点击上传，则显示在页面中</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190118173402241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>5.依次上传三张图片后</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190118174309689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>查看此时数据库ih_house_image表信息，在上图上传的三张图片是house_id为6的房屋例子，所以在下标显示house_id为6的图片url链接为三个</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190118174853406.png" alt></fancybox></p><p>6.同时查看七牛云上的存储空间</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190118180427123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="五丶celery的使用"><a href="#五丶celery的使用" class="headerlink" title="五丶celery的使用"></a>五丶celery的使用</h1><p>1.问题，我们在做网站后端程序开发时，会碰到这样的需求：用户需要在我们的网站填写注册信息，我们发给用户一封注册激活邮件到用户邮箱，如果由于各种原因，这封邮件发送所需时间较长，那么客户端将会等待很久，造成不好的用户体验.</p><p>2.解决，celery适用异步处理问题，当发送邮件、或者文件上传, 图像处理等等一些比较耗时的操作，我们可将其异步执行，这样用户不需要等待很久，提高用户体验。 celery的特点是：</p><p>简单，易于使用和维护，有丰富的文档。<br>高效，单个celery进程每分钟可以处理数百万个任务。<br>灵活，celery中几乎每个部分都可以自定义扩展。</p><p>3.Task Queue</p><p>celery通过消息进行通信，通常使用一个叫Broker(中间人)来协client(任务的发出者)和worker(任务的处理者). clients发出消息到队列中，broker将队列中的信息派发给worker来处理。</p><p>  一个celery系统可以包含很多的worker和broker，可增强横向扩展性和高可用性能</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119094125417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>4.在项目ihome目录下创建一个tasks包，用于处理项目中的需要的异步任务，在这个包下创建单一文件来处理对应的异步任务，这种方式是对于所有的web框架来说，都是万能的，像django中使用的djcelery包是别人针对于django框架封装好的包</p><ul><li><strong>step1</strong> 在task包下创建一个task_sms.py文件，在这个文件中去编写对于发送短信的任务</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119095436319.png" alt></fancybox></p><ul><li><strong>step2</strong> 定义celery对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = Celery(<span class="string">"ihome"</span>, broker=<span class="string">"redis://127.0.0.1:6379/1"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 定义短信的异步任务</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_sms</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""发送短信的异步任务"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 导入之前定义好云通讯中封装的CCP类，并创建CCP的对象ccp</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ihome.libs.yuntongxun.SendSMS <span class="keyword">import</span> CCP</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 通过ccp对象调用sendTemplateSMS方法，同时调用send_sms方法时传递三个参数，从这三个参数拿sendTemplateSMS方法中即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_sms</span><span class="params">(to, datas, tempId)</span>:</span></span><br><span class="line">    <span class="string">"""发送短信的异步任务"""</span></span><br><span class="line">    ccp = CCP()</span><br><span class="line">    ccp.sendTemplateSMS(to, datas, tempId)</span><br></pre></td></tr></table></figure><ul><li><strong>step6</strong> 回到api_1_0目录下的verify_code中，将之前写的get_sms_code方法中发送短信逻辑代码进行重新编写，跟之前写的逻辑不一样，之前是发送成功则返回发送成功msg，失败则返回发送失败msg，大多网站都是现在以下这种逻辑</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用celery异步发送短信</span></span><br><span class="line">send_sms.delay(mobile, [sms_code, int(constants.SMS_CODE_REDIS_EXPIRES/<span class="number">60</span>)], <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 发送成功与否，用户自己去查看手机，大多网站都是这样做的</span></span><br><span class="line"><span class="keyword">return</span> jsonify(errno=RET.OK, errmsg=<span class="string">"发送短信成功"</span>)</span><br></pre></td></tr></table></figure><h1 id="六丶测试celery"><a href="#六丶测试celery" class="headerlink" title="六丶测试celery"></a>六丶测试celery</h1><p>1.在终端中运行项目</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119104246640.png" alt></fancybox></p><p>2.另开一个终端执行celery -A ihome.tasks.task_sms worker -l info，-l代表开启日志 info级别，但是出现了报错</p><p><fancybox><img src="https://img-blog.csdnimg.cn/2019011910492251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>3.在百度上查询此报错信息，明白原来是celery4.0以上版本不支持windows</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119105123371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>4.所以博主这里进行 pip install celery==3.1.7 进行3.x版本安装</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119112227903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>5.在新开启的终端上，重新执行celery -A ihome.tasks.task_sms worker -l info，报错问题解决</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119105942103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>6.进入网站注册界面<a href="http://127.0.0.1:5000/register.html" target="_blank" rel="noopener">http://127.0.0.1:5000/register.html</a>，后进行注册，输入博主本人手机号，输入正确验证码，然后点击获取短信验证码后，回头查看celery终端，结果又报错了</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119114933981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>7.这次报的错好像是跟redis有关，查看redis版本为3.0的</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119115014275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>8.将redis版本缓存2.0的，再看看是否报错，pip install redis==2.10.5</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119115115354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>9.先运行项目，再开启另一终端执行celery -A ihome.tasks.task_sms worker -l info</p><ul><li><strong>step1</strong> 在注册页面进行注册</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119115537165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 查看celery终端日志，显示七牛SDK发送短信成功日志</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119115950736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 查看博主手机上短信验证码为987427</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119120213276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><ul><li><strong>step4</strong> 查看redis数据库1中的keys</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119120537671.png" alt></fancybox></p><h1 id="七丶celery以目录形式创建"><a href="#七丶celery以目录形式创建" class="headerlink" title="七丶celery以目录形式创建"></a>七丶celery以目录形式创建</h1><p>1.在ihome/tasks目录下创建main.py用于启动文件，再创建一个config.py用于作配置文件，然后在tasks目录下创建一个sms包，再该包下创建一个tasks.py文件或者是celery.py文件用于创建worker</p><p><img src="https://img-blog.csdnimg.cn/20190119125912867.png" alt></p><p>2.拆分task_sms.py文件</p><ul><li><strong>step1</strong> 在启动文件main.py中编写以下代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = Celery(<span class="string">"ihome"</span>, broker=<span class="string">"redis://127.0.0.1:6379/1"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 将如下代码拷贝到tasks.py中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_sms</span><span class="params">(to, datas, tempId)</span>:</span></span><br><span class="line">    <span class="string">"""发送短信的异步任务"""</span></span><br><span class="line">    ccp = CCP()</span><br><span class="line">    ccp.sendTemplateSMS(to, datas, tempId)</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 将main.py中创建app对象中的配置文件拿到config.py中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BROKER_URL = <span class="string">"redis://127.0.0.1:6379/1"</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/2'</span></span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 回到main.py中进入如下编写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app = Celery(<span class="string">"ihome"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 引入配置信息</span></span><br><span class="line">app.config_from_object(config)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自动搜索任务</span></span><br><span class="line">app.autodiscover_tasks([<span class="string">"ihome.tasks.sms"</span>])</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 回到ihome/api_1_0/verify_code.py中，将之前写的代码进行修改，将不在从from ihome.tasks.task_sms去导入send_sms，而是从我们刚定义好的sms.tasks中去导入send_sms</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ihome.tasks.sms.tasks <span class="keyword">import</span> send_sms</span><br></pre></td></tr></table></figure><p>3.测试</p><ul><li><strong>step1</strong> 首先启动项目，再另起终端启动worker，结果又特么报错了</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119135139410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 这个错是因为操作系统原因导致的，在linux系统上运行则不会保错</li></ul><p>原因：<font style="color:red">因为windows操作系统的原因，在Windows中，多进程multiprocessing使用的是序列化pickle来在多进程之间转移数据，而socket对象是不能被序列化的，但是在linux操作系统上却没问题，因为在linux上多进程multiprocessing使用的是fork，所以在windows上可以改用多线程，而celery是使用多进程以及携程方式进行异步工作，博主又是在windows环境进行测试开发，所以这里先暂时这样，等开发完成部署在linux服务器即可</font></p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190119141425707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p>]]></content>
      
      
      <categories>
          
          <category> Flask开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask网站实战开发 </tag>
            
            <tag> 手机端租房网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask项目之手机端租房网站的实战开发（九）</title>
      <link href="/2019/11/04/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
      <url>/2019/11/04/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶区县信息后端编写"><a href="#一丶区县信息后端编写" class="headerlink" title="一丶区县信息后端编写"></a>一丶区县信息后端编写</h1><p>1.定义视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.route("/areas")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_area_info</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取区县信息</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>2.逻辑编写</p><ul><li><strong>step1</strong> 从数据库中获取所有区县信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 从数据库中获取所有区县信息</span></span><br><span class="line">    area_li = Area.query.all()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"数据库异常"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 在Area类中构建一个to_dict方法，将对象转换成字典，因为我们给前端传输数据是需要传输json格式数据的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_dict</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""将对象转换为字典"""</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"aid"</span>: self.id,</span><br><span class="line">        <span class="string">"aname"</span>: self.name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 遍历对象列表，调用每个对象中的to_dict方法，将返回的值添加到area_dict_li列表中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将对象转换为字典</span></span><br><span class="line">area_dict_li = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> area <span class="keyword">in</span> area_li:</span><br><span class="line">    area_dict_li.append(area.to_dict())</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 返回正确响应数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> jsonify(errno=RET.OK, errmsg=<span class="string">"OK"</span>, data=area_dict_li)</span><br></pre></td></tr></table></figure><p>3.测试接口</p><ul><li><strong>step1</strong> 运行项目，打开Postman测试工具，向127.0.0.1:5000/api/v1.0/areas发送get请求</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115142331749.png" alt></fancybox></p><ul><li><strong>step2</strong> 返回接口正确响应数据，因为数据库Area表没有数据，所以返回的响应数据为空</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115142537149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>4.向数据库中ih_area_info以及ih_facility_info两张表插入测试数据</p><ul><li><strong>step1</strong> 执行如下SQL语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`ih_area_info`</span>(<span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="string">'锦江区'</span>),(<span class="string">'青羊区'</span>),(<span class="string">'金牛区'</span>),(<span class="string">'武侯区'</span>),(<span class="string">'成华区'</span>),(<span class="string">'龙泉驿区'</span>),(<span class="string">'青白江区'</span>),(<span class="string">'新都区'</span>),(<span class="string">'温江区'</span>),(<span class="string">'郫都区'</span>),(<span class="string">'双流区'</span>),(<span class="string">'高新区'</span>),(<span class="string">'天府新区'</span>),(<span class="string">'新津县'</span>),(<span class="string">'大邑县'</span>),(<span class="string">'金堂县'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`ih_facility_info`</span>(<span class="string">`name`</span>) <span class="keyword">VALUES</span>(<span class="string">'无线网络'</span>),(<span class="string">'热水淋浴'</span>),(<span class="string">'空调'</span>),(<span class="string">'暖气'</span>),(<span class="string">'允许吸烟'</span>),(<span class="string">'饮水设备'</span>),(<span class="string">'牙具'</span>),(<span class="string">'香皂'</span>),(<span class="string">'拖鞋'</span>),(<span class="string">'手纸'</span>),(<span class="string">'毛巾'</span>),(<span class="string">'沐浴露、洗发露'</span>),(<span class="string">'冰箱'</span>),(<span class="string">'洗衣机'</span>),(<span class="string">'电梯'</span>),(<span class="string">'允许做饭'</span>),(<span class="string">'允许带宠物'</span>),(<span class="string">'允许聚会'</span>),(<span class="string">'门禁系统'</span>),(<span class="string">'停车位'</span>),(<span class="string">'有线网络'</span>),(<span class="string">'电视'</span>),(<span class="string">'浴缸'</span>);</span><br></pre></td></tr></table></figure><p>ih_area_info表</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115144350737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>ih_facility_info表</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115144445814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 再回到Postman中Send发送请求，显示出正确响应数据</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115144716273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="二丶为区县信息补充缓存机制"><a href="#二丶为区县信息补充缓存机制" class="headerlink" title="二丶为区县信息补充缓存机制"></a>二丶为区县信息补充缓存机制</h1><p>1.为什么要补充缓存机制</p><ul><li><strong>step1</strong> 在网站首页，需要频繁获取区域数据</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115145249618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 在我的爱家中，发布房源也需要频繁获取区域数据</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115145600238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 以及在房源列表，搜索栏也要频繁获取区域数据</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115145708692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>2.分析，因为区县一般都是固定的，不会经常变化，搜索页面和主页是用户经常访问的地方，那么即我们后端接口以及数据库就会被大量访问，而且是在很短时间内，这样可能会出现异常问题，导致访问速度缓慢，所以完美解决方法就是使用缓存</p><p>3.具体实现流程</p><ul><li><strong>step1</strong> 当用户访问区县信息时，就会调用后端我们写的get_area_info接口，之前写的代码是，每次访问都会从数据库中拿去数据，现在将这一块改变一下，先从redis数据中拿去数据库（这里选择redis数据库，因为是内存级的数据库）</li><li><strong>step2</strong> 如果redis数据库中有区域数据，直接返回给前端</li><li><strong>step3</strong> 当redis数据库中没有区域数据时，此时再去mysql数据库中进行数据获取，拿到的区域数据不会马上返回给前端，而是将拿到的数据保存到redis数据库中，最后才返回给前端</li></ul><p>4.逻辑代码编写</p><p>思考：将数据保存到redis数据库中，此时需要思考，以怎么形式保存数据，保存哪些数据到redis数据库</p><p>实现：是将整个返回给前端正确响应数据全部以json格式的字符串保存</p><ul><li><strong>step1</strong> 将数据转换为json字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp_dict = dict(errno=RET.OK, errmsg=<span class="string">"OK"</span>, data=area_dict_li)</span><br><span class="line">resp_json_str = json.dumps(resp_dict)</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 将构建的json格式的字符串响应数据保存到redis数据库中， 并设置有效期</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    redis_store.setex(<span class="string">"area_info"</span>,constants.AREA_INFO_REDIS_CACHE_EXPIRES, resp_json_str)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 返回构造响应头数据，设置Content-Type为json，默认的为html</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> resp_json_str, <span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>:<span class="string">"application/json"</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 调用接口一开始从redis数据库中拿去区域数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    resp_json_str = redis_store.get(<span class="string">"area_info"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> resp_json_str <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> resp_json_str, <span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 当redis数据库中获取的数据不为空时，往日志info中记录一句话，方便测试是从mysql 还是 redis 获取的区域数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current_app.logger.info(<span class="string">"Area data from redis"</span>)</span><br></pre></td></tr></table></figure><p>5.测试redis缓存是否成功</p><ul><li><strong>step1</strong> 运行项目</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115162249936.png" alt></fancybox></p><ul><li><strong>step2</strong> 在Postman测试工具中向后端接口</li></ul><p>第一次Send发送请求，查看程序运行日志，并没有显示我们定义日志信息</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115162754415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>第二次Send发送请求，则显示我们定义的info日志信息，说明区域数据是从redis数据库中获取的</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115162944855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 查看redis数据库，并获取area_info键的值</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115164249197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="三丶缓存数据同步问题"><a href="#三丶缓存数据同步问题" class="headerlink" title="三丶缓存数据同步问题"></a>三丶缓存数据同步问题</h1><p><strong>问</strong>：怎么保证redis缓存的数据和mysql数据保持一致性？</p><p><strong>第一种</strong>方式：mysql数据库维护人员在修改区域表数据时，将redis数据库key删除</p><p><strong>第二种</strong>方式：就是我们这种简单暴力有效的方式，设置数据的有效期，让redis数据库来帮我们把数据进行删除</p><h1 id="四丶完善后端用户模块"><a href="#四丶完善后端用户模块" class="headerlink" title="四丶完善后端用户模块"></a>四丶完善后端用户模块</h1><p>1.对profile模块中的update_name进行修改</p><ul><li><strong>step1</strong> 修改路由请求方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.route("/users/name", methods=["PUT"])</span></span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 从g对象中获取用户id</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_id = g.user_id</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 获取前端请求中的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req_dict = request.get_json()</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 判断参数是否为空</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> req_dict:</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.PARAMERR, errmsg=<span class="string">"参数不完整"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 获取用户修改的名字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = req_dict.get(<span class="string">"name"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step6</strong> 判断用户是否输入用户名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.PARAMERR, errmsg=<span class="string">"名字不能为空"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step7</strong> 将用户修改后的名字保存到数据库，需要注意的是这里不需要判断名字name是否重复，因为当初在创建数据库表字段name的时候设置了唯一索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    User.query.filter_by(id=user_id).update(&#123;<span class="string">"name"</span>: name&#125;)</span><br><span class="line">    db.session.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    db.session.rollback()</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"保存用户名字失败"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step8</strong> 因为在登录和注册接口编写时候最后都将name保存到session中，所以当用户修改name后，也需要将新的name进行session保存</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session[<span class="string">"name"</span>] = name</span><br></pre></td></tr></table></figure><ul><li><strong>step9</strong> 最后返回正确响应</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> jsonify(errno=RET.OK, errmsg=<span class="string">"修改成功"</span>, data=&#123;<span class="string">"name"</span>: name&#125;)</span><br></pre></td></tr></table></figure><p>2.获取个人信息在我的爱家中进行显示</p><ul><li><strong>step1</strong> 定义视图函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.route("/user", methods=["GET"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_profile</span><span class="params">()</span>:</span></span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 获取用户id</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_id = g.user_id</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 根据用户id在数据库中查询个人信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user = User.query.get(user_id)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"获取用户信息失败"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 判断用户对象是否为空</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> User <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.NODATA, errmsg=<span class="string">"无效操作"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 在models模块中构建一个to_dict方法，用于构建我们返回给前端的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_dict</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""将对象转换为字典数据"""</span></span><br><span class="line">    user_dict = &#123;</span><br><span class="line">        <span class="string">"user_id"</span>: self.id,</span><br><span class="line">        <span class="string">"name"</span>: self.name,</span><br><span class="line">        <span class="string">"mobile"</span>: self.mobile,</span><br><span class="line">        <span class="string">"avatar"</span>: constants.QINIU_URL_DOMAIN + self.avatar_url <span class="keyword">if</span> self.avatar_url <span class="keyword">else</span> <span class="string">""</span>,</span><br><span class="line">        <span class="string">"create_time"</span>: self.create_time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user_dict</span><br></pre></td></tr></table></figure><ul><li><strong>step6</strong> 回到profile模块中，返回正确响应数据给前端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> jsonify(errno=RET.OK, errmsg=<span class="string">"OK"</span>, data=user.to_dict())</span><br></pre></td></tr></table></figure><p>3.获取用户的实名认证信息</p><ul><li><strong>step1</strong> 定义视图函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.route("/users/auth", methods=["GET"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_auth</span><span class="params">()</span>:</span></span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 获取用户id</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_id = g.user_id</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 根据用户id在数据库中进行查询, 获取用户对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user = User.query.get(user_id)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"获取用户实名认证信息失败"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 判断用户对象是否为空</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.NODATA, errmsg=<span class="string">"无效操作"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 在models模块中构建一个auth_to_dict方法，用于构建我们返回给前端的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_to_dict</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""将用户实名信息转换为字典数据"""</span></span><br><span class="line">    auth_dict = &#123;</span><br><span class="line">        <span class="string">"user_id"</span>: self.id,</span><br><span class="line">        <span class="string">"real_name"</span>: self.real_name,</span><br><span class="line">        <span class="string">"id_card"</span>: self.id_card</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> auth_dict</span><br></pre></td></tr></table></figure><ul><li><strong>step6</strong> 回到profile模块中，返回正确响应数据给前端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> jsonify(errno=RET.OK, errmsg=<span class="string">"OK"</span>, data=user.auth_to_dict())</span><br></pre></td></tr></table></figure><p>4.向数据库中保存用户实名认证信息</p><ul><li><strong>step1</strong> 定义视图函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.route("/users/auth", methods=["POST"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_user_auth</span><span class="params">()</span>:</span></span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 获取用户id</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_id = g.user_id</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 获取前端发送请求中的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req_data = request.get_json()</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 判断参数是否为空</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> req_data:</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.PARAMERR, errmsg=<span class="string">"参数错误"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 获取用户输入的真实姓名和身份证号</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">real_name = req_data.get(<span class="string">"real_name"</span>)</span><br><span class="line">id_card = req_data.get(<span class="string">"id_card"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step6</strong> 校验参数完整性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> all([real_name,id_card]):</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.PARAMERR, errmsg=<span class="string">"参数错误"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step7</strong> 将用户填写的真实姓名和身份证号保存到数据库中，这里在数据库进行数据更新是为什么将real_name和id_card默认为空，因为在后端来说，用户只能设置一次实名认证，当real_name和id_card为None时，才代用户是第一次进行认证，当获取的real_name和id_card不为空时，说明用户之前已经认证过了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    User.query.filter_by(id=user_id, real_name=<span class="literal">None</span>, id_card=<span class="literal">None</span>).update(&#123;<span class="string">"real_name"</span>:real_name, <span class="string">"id_card"</span>:id_card&#125;)</span><br><span class="line">    db.session.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    db.session.rollback()</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"保存用户实名信息失败"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step8</strong> 向前端返回正确响应</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> jsonify(errno=RET.OK, errmsg=<span class="string">"OK"</span>)</span><br></pre></td></tr></table></figure><h1 id="五丶完善前端用户模块"><a href="#五丶完善前端用户模块" class="headerlink" title="五丶完善前端用户模块"></a>五丶完善前端用户模块</h1><p>1.在profile.html文件中进行如下修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form-name"</span> <span class="attr">action</span>=<span class="string">"/api/profile/name"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在profile.js中进行如下编写</p><ul><li><strong>step1</strong> 在个人信息栏显示用户信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在页面加载是向后端查询用户的信息</span></span><br><span class="line">    $.<span class="keyword">get</span>("/api/v1.0/user", function(resp)&#123;</span><br><span class="line">        <span class="comment">// 当后端接口检验登录装饰器返回4101状态码，表示用户未登录，即跳转到登录页面</span></span><br><span class="line">        <span class="keyword">if</span> (resp.errno == <span class="string">"4101"</span>) &#123;</span><br><span class="line">            location.href = <span class="string">"/login.html"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后端返回正确响应码，将响应数据中的name填写到id = user-name的标签内容上</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (resp.errno == <span class="string">"0"</span>) &#123;</span><br><span class="line">            $(<span class="string">"#user-name"</span>).val(resp.data.name);</span><br><span class="line">            <span class="comment">// 头像链接存在则显示到src下</span></span><br><span class="line">            <span class="keyword">if</span> (resp.data.avatar) &#123;</span><br><span class="line">                $(<span class="string">"#user-avatar"</span>).attr(<span class="string">"src"</span>, resp.data.avatar);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">"json"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 将用户修改后的名字保存到数据库中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将用户修改后名字向后端进行发送</span></span><br><span class="line">    $(<span class="string">"#form-name"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="comment">// 获取用户输入的名字</span></span><br><span class="line">        <span class="keyword">var</span> name = $(<span class="string">"#user-name"</span>).val();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">            alert(<span class="string">"请填写用户名！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"/api/v1.0/users/name"</span>,</span><br><span class="line">            type:<span class="string">"PUT"</span>,</span><br><span class="line">            data: <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: name&#125;),</span><br><span class="line">            contentType: <span class="string">"application/json"</span>,</span><br><span class="line">            dataType: <span class="string">"json"</span>,</span><br><span class="line">            headers:&#123;</span><br><span class="line">                <span class="string">"X-CSRFTOKEN"</span>:getCookie(<span class="string">"csrf_token"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (data.errno == <span class="string">"0"</span>) &#123;</span><br><span class="line">                    $(<span class="string">".error-msg"</span>).hide();</span><br><span class="line">                    showSuccessMsg();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.errno == <span class="string">"4001"</span>) &#123;</span><br><span class="line">                    $(<span class="string">".error-msg"</span>).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.errno == <span class="string">"4101"</span>) &#123;</span><br><span class="line">                    location.href = <span class="string">"/login.html"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>3.在我的爱家my.js中进行如下编写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.<span class="keyword">get</span>("/api/v1.0/user", function(resp)&#123;</span><br><span class="line">        <span class="comment">// 用户未登录</span></span><br><span class="line">        <span class="keyword">if</span> (resp.errno == <span class="string">"4101"</span>) &#123;</span><br><span class="line">            location.href = <span class="string">"/login.html"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询到了用户的信息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (resp.errno == <span class="string">"0"</span>) &#123;</span><br><span class="line">            $(<span class="string">"#user-name"</span>).html(resp.data.name);</span><br><span class="line">            $(<span class="string">"#user-mobile"</span>).html(resp.data.mobile);</span><br><span class="line">            <span class="keyword">if</span> (resp.data.avatar) &#123;</span><br><span class="line">                $(<span class="string">"#user-avatar"</span>).attr(<span class="string">"src"</span>, resp.data.avatar);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">"json"</span>);</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4.在实名认证auth.js中进行如下编写</p><ul><li><strong>step1</strong> 当页面加载完毕时，想后端接口发送请求来获取用户的姓名和身份证</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 查询用户的实名认证信息</span></span><br><span class="line">    $.<span class="keyword">get</span>("/api/v1.0/users/auth", function(resp)&#123;</span><br><span class="line">        <span class="comment">// 4101代表用户未登录</span></span><br><span class="line">        <span class="keyword">if</span> (resp.errno == <span class="string">"4101"</span>) &#123;</span><br><span class="line">            location.href = <span class="string">"/login.html"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resp.errno == <span class="string">"0"</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果返回的数据中real_name与id_card不为null，表示用户有填写实名信息</span></span><br><span class="line">            <span class="keyword">if</span> (resp.data.real_name &amp;&amp; resp.data.id_card) &#123;</span><br><span class="line">                $(<span class="string">"#real-name"</span>).val(resp.data.real_name);</span><br><span class="line">                $(<span class="string">"#id-card"</span>).val(resp.data.id_card);</span><br><span class="line">                <span class="comment">// 给input添加disabled属性，禁止用户修改</span></span><br><span class="line">                $(<span class="string">"#real-name"</span>).prop(<span class="string">"disabled"</span>, <span class="literal">true</span>);</span><br><span class="line">                $(<span class="string">"#id-card"</span>).prop(<span class="string">"disabled"</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 隐藏提交保存按钮</span></span><br><span class="line">                $(<span class="string">"#form-auth&gt;input[type=submit]"</span>).hide();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(resp.errmsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">"json"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 当页面加载完毕时，如果用户已经进行了实名认证，那么就不显示保存按钮以及对输入框进行禁止修改</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管理实名信息表单的提交行为</span></span><br><span class="line">    $(<span class="string">"#form-auth"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="comment">// 如果用户没有填写完整，展示错误信息</span></span><br><span class="line">        <span class="keyword">var</span> realName = $(<span class="string">"#real-name"</span>).val();</span><br><span class="line">        <span class="keyword">var</span> idCard = $(<span class="string">"#id-card"</span>).val();</span><br><span class="line">        <span class="keyword">if</span> (realName == <span class="string">""</span> ||  idCard == <span class="string">""</span>) &#123;</span><br><span class="line">            $(<span class="string">".error-msg"</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 将表单的数据转换为json字符串</span></span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            real_name: realName,</span><br><span class="line">            id_card: idCard</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 向后端发送请求</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"/api/v1.0/users/auth"</span>,</span><br><span class="line">            type:<span class="string">"post"</span>,</span><br><span class="line">            data: jsonData,</span><br><span class="line">            contentType: <span class="string">"application/json"</span>,</span><br><span class="line">            dataType: <span class="string">"json"</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">"X-CSRFTOKEN"</span>: getCookie(<span class="string">"csrf_token"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (resp.errno == <span class="string">"0"</span>) &#123;</span><br><span class="line">                    $(<span class="string">".error-msg"</span>).hide();</span><br><span class="line">                    <span class="comment">// 显示保存成功的提示信息</span></span><br><span class="line">                    showSuccessMsg();</span><br><span class="line">                    $(<span class="string">"#real-name"</span>).prop(<span class="string">"disabled"</span>, <span class="literal">true</span>);</span><br><span class="line">                    $(<span class="string">"#id-card"</span>).prop(<span class="string">"disabled"</span>, <span class="literal">true</span>);</span><br><span class="line">                    $(<span class="string">"#form-auth&gt;input[type=submit]"</span>).hide();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>5.当用户进行实名制后，那么在我的房源页面，就不应该显示去实名认证按钮</p><ul><li><strong>step1</strong> 实名制之前显示界面</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190121173205965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 在myhouse.js中进行判断验证，如果用户已经实名制了，那么就不显示此按钮，否则才会显示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 对于发布房源，只有认证后的用户才可以，所以先判断用户的实名认证状态</span></span><br><span class="line">    $.<span class="keyword">get</span>("/api/v1.0/users/auth", function(resp)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"4101"</span> == resp.errno) &#123;</span><br><span class="line">            <span class="comment">// 用户未登录</span></span><br><span class="line">            location.href = <span class="string">"/login.html"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"0"</span> == resp.errno) &#123;</span><br><span class="line">            <span class="comment">// 未认证的用户，在页面中展示 "去认证"的按钮</span></span><br><span class="line">            <span class="keyword">if</span> (!(resp.data.real_name &amp;&amp; resp.data.id_card)) &#123;</span><br><span class="line">                $(<span class="string">".auth-warn"</span>).show();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 实名制之后显示页面</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190121173708406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="六丶测试用户模块中个人信息栏，我的爱家，实名认证"><a href="#六丶测试用户模块中个人信息栏，我的爱家，实名认证" class="headerlink" title="六丶测试用户模块中个人信息栏，我的爱家，实名认证"></a>六丶测试用户模块中个人信息栏，我的爱家，实名认证</h1><p>1.个人信息栏测试</p><ul><li><strong>step1</strong> 登录网站，进入个人信息栏，显示如下</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115202637893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 当修改用户名后，点击保存，显示保存成功提示</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115202916720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>2.我的爱家栏测试，成功显示出用户头像，用户名以及手机号</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115203111552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>3.用户实名认证栏测试</p><ul><li><strong>step1</strong> 首次进行实名认证，界面显示如下</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115203228933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 当未填写姓名和身份证号时，出现如下显示</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115203940925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 当输入完整信息后，会显示保存成功，出现如下界面</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/2019011520444388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 查看数据库信息</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115204947136.png" alt></fancybox></p><ul><li><strong>step5</strong> 此号码已经实名认证成功，再次进入实名认证，则显示如下界面</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115205408537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="七丶效果动图展示"><a href="#七丶效果动图展示" class="headerlink" title="七丶效果动图展示"></a>七丶效果动图展示</h1><p><fancybox><img src="https://img-blog.csdnimg.cn/20190115211230304.gif" alt></fancybox></p><br><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/86488529" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/86488529</a></p>]]></content>
      
      
      <categories>
          
          <category> Flask开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask网站实战开发 </tag>
            
            <tag> 手机端租房网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask项目之手机端租房网站的实战开发（八）</title>
      <link href="/2019/11/04/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AB%EF%BC%89/"/>
      <url>/2019/11/04/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('别搞了，你破解不了的');const txt = document.getElementById('enc_content').innerHTML;// alert(txt,"1")// alert(pwd,"2")// alert(onError,"3")let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);if(plaintext == ""){document.getElementById("enc_pwd_input").value="";document.getElementById("enc_error").innerHTML = "密码错误!";return}// alert(plaintext)} catch(err) {if(onError) {// alert(onError,"4")// alert(err,"5")onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" placeholder="请输入文章密码" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "密码错误!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
      
      
      <categories>
          
          <category> Flask开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask网站实战开发 </tag>
            
            <tag> 手机端租房网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask项目之手机端租房网站的实战开发（七）</title>
      <link href="/2019/11/04/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2019/11/04/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('别搞了，你破解不了的');const txt = document.getElementById('enc_content').innerHTML;// alert(txt,"1")// alert(pwd,"2")// alert(onError,"3")let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);if(plaintext == ""){document.getElementById("enc_pwd_input").value="";document.getElementById("enc_error").innerHTML = "密码错误!";return}// alert(plaintext)} catch(err) {if(onError) {// alert(onError,"4")// alert(err,"5")onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" placeholder="请输入文章密码" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "密码错误!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
      
      
      <categories>
          
          <category> Flask开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask网站实战开发 </tag>
            
            <tag> 手机端租房网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask项目之手机端租房网站的实战开发（六）</title>
      <link href="/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶补充"><a href="#一丶补充" class="headerlink" title="一丶补充"></a>一丶补充</h1><p>1.之前写的获取的图片验证码，有一个地方需要做进一步的处理，需要删除redis数据库中的图片验证码，防止用户使用同一个图片验证码验证多次，所以将删除代码放在取出redis数据库中图片验证码的值之后，也就是在real_image_code变量之后进行删除，这样即使删除了redis数据中的数据，也不会影响接下来的判断校验，这样做的目的就是说不管用户填对填错，只有一次验证机会</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106164545368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>2.测试以上逻辑是否正确</p><ul><li><strong>step1</strong> 重新运行程序，刷新<a href="http://127.0.0.1:5000/register.html" target="_blank" rel="noopener">http://127.0.0.1:5000/register.html</a> 注册页面</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106165322181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 查看redis数据库图片验证码的值</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106165639391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 在Postman工具中发送短信验证码路由地址</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106170016580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>此时绑定的手机号码上就会收到我们定义的6位数验证码</p><p><img src="https://img-blog.csdnimg.cn/20190106170220288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></p><ul><li><strong>step4</strong> 查看redis数据库(这个时候并没有超过180秒)，发现图片验证码的key已经被删除</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/2019010618225260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>3.短信验证码这一块，大多网站都会在用户发送第一次验证码后，在前端页面会出现60s后再试之类的提醒，那么对于后端来说，也是需要的，比如被人知道了后我端口的接口，1分钟之类不断的发送短信，那可就不好了，所以为了做到优化以及安全防范，那么就需要在后端进行一个禁止60s内发送第二次短信的一个逻辑，不仅仅限于前端</p><ul><li><p><strong>step1</strong> 逻辑分析，首先当发送第一次短信时，需要记住发送短信记录，当时间超过60s以上，才可以发送第二条短信，此时就需要想想是在什么时候将这个发送短信的记录存到redis数据库，大多公司是这样做的，不管发送成功与否，都是需要等待60s后才能发送第二次，所以我们这里也是这样做的，在发送短信之前就将记录存到redis数据库当中去</p></li><li><p><strong>step2</strong> 当在保存短信验证码的时候，将这个第一次发送短信的记录存到redis数据库中，让redis数据库去维护记录的有效期60s，这个记录的数据随便起，这里设置1，那么当在redis数据库查询不到这个记录时，代表可以记录过了有效期被删除了，则代表可以发送第二条短信验证码了</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis_store.setex(<span class="string">"send_sms_code_%s"</span> % mobile, constants.SEND_SMS_CODE_INTERVAL, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 然后在判断手机号是否注册之前进行校验判断，判断对于此手机号码在60s以内有没有之前发送短信的操作，如果有，则不代表用户操作频繁，不予处理（注：经测试如果在判断获取记录的值的时候代码为if send_flag == 1时，会出现bug，所以建议使用is not None即可）</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106184125601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>4.测试以上逻辑是否正常</p><ul><li><strong>step1</strong> 启动项目程序</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106175447918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 刷新<a href="http://127.0.0.1:5000/register.html" target="_blank" rel="noopener">http://127.0.0.1:5000/register.html</a> 注册页面，生成新的图片验证码，将验证码内容以及对应编码通过发送短信路由发送到对应接口进行测试</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106180053624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 此时从redis数据库中查看图片验证码的id以及值</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106180213386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 在Postman工具中，对短信接口地址进行访问，并携带image_code以及image_code_id</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106180352665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>同时收到手机短信验证码</p><p><img src="https://img-blog.csdnimg.cn/20190106180531689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></p><ul><li><strong>step5</strong> 最关键的一步，与此同时，刷新图片验证码，获取新的图片验证码，然后在redis数据查询id以及图片验证码的值后在Postman中进行再次发送（注：这里的演示是在60s之内发送第二次请求给后端短信接口），出现如下提示，代表逻辑正确</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106182755941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="二丶短信验证码前端编写"><a href="#二丶短信验证码前端编写" class="headerlink" title="二丶短信验证码前端编写"></a>二丶短信验证码前端编写</h1><p>1.在register.js中构造请求数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> req_data = &#123;</span><br><span class="line">      <span class="string">"image_code"</span>: imageCode,  <span class="comment">//用户输入图片验证码的值</span></span><br><span class="line">      <span class="string">"image_code_id"</span>: imageCodeId  <span class="comment">//对应图片验证码的编号</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>2.通过ajax方式想后端去发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想后端发送请求</span></span><br><span class="line">$.<span class="keyword">get</span>("/api/v1.0/sms_codes/"+mobile, req_data, function (resp) &#123;</span><br><span class="line">    <span class="comment">// 回调函数中的resp是后端返回的json字符串，通过ajax将这个字符串转换成js对象</span></span><br><span class="line">    <span class="comment">// 所以这里的resp为ajax转换后的对象</span></span><br><span class="line">    <span class="keyword">if</span> (resp.error == <span class="string">"0"</span>) &#123;</span><br><span class="line">        <span class="comment">// 表示发送成功</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (num&gt;<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 修改倒计时的文本内容</span></span><br><span class="line">                $(<span class="string">".phonecode-a"</span>).html(num + <span class="string">"s"</span>);</span><br><span class="line">                num -= <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">".phonecode-a"</span>).html(<span class="string">"获取验证码"</span>);</span><br><span class="line">                $(<span class="string">".phonecode-a"</span>).attr(<span class="string">"onclick"</span>, <span class="string">"sendSMSCode();"</span>);</span><br><span class="line">                clearInterval(timer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>, <span class="number">60</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(resp.errmsg);</span><br><span class="line">        $(<span class="string">".phonecode-a"</span>).attr(<span class="string">"onclick"</span>, <span class="string">"sendSMSCode();"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.测试</p><ul><li><strong>step1</strong> 启动程序</li></ul><p><img src="https://img-blog.csdnimg.cn/20190106192433994.png" alt></p><ul><li><strong>step2</strong> 访问<a href="http://127.0.0.1:5000/register.html" target="_blank" rel="noopener">http://127.0.0.1:5000/register.html</a> 注册界面</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106193817884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p><strong>step3</strong> 输入手机号，图片验证码后点击获取短信验证码，成功出现倒计时，同时手机收到短信验证码</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106193854456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>手机验证码</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106194011945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 在谷歌浏览器中查看接口地址的NetWork</li></ul><p>General数据</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106194231188.png" alt></fancybox></p><p>Response响应数据 </p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106194826574.png" alt></fancybox></p><h1 id="三丶注册后端接口编写"><a href="#三丶注册后端接口编写" class="headerlink" title="三丶注册后端接口编写"></a>三丶注册后端接口编写</h1><p>1.在项目api_1_0目录下创建passport.py文件用作于注册以及登录的逻辑接口文件</p><p><img src="https://img-blog.csdnimg.cn/20190106202450959.png" alt></p><p>2.构建register视图函数，并在ihome/init文件中导入passport模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.route("/users", methods=["POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>3.逻辑编写</p><ul><li><strong>step1</strong> 获取前端请求发送请求中的json数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">req_dict = request.get_json()</span><br><span class="line">mobile = req_dict.get(<span class="string">"mobile"</span>) <span class="comment">#跟前端约定好的</span></span><br><span class="line">sms_code = req_dict.get(<span class="string">"sms_code"</span>)</span><br><span class="line">password = req_dict.get(<span class="string">"password"</span>)</span><br><span class="line">password2 = req_dict.get(<span class="string">"password2"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 校验参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> all([mobile, sms_code, password, password2]):</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.PARAMERR, errmsg=<span class="string">"请求参数不完整"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 判断用户输入的手机号码格式</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190110163000831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 从redis数据库中取出短信验证码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    real_sms_code = redis_store.get(<span class="string">"sms_code_%s"</span> % mobile)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"读取真实短信验证码异常"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 判断短信验证码是否过期</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> real_sms_code <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.NODATA, errmsg=<span class="string">"短信验证码失效"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step6</strong> 判断用户输入的短信验证码是否正确</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> real_sms_code != sms_code:</span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.DATAERR, errmsg=<span class="string">"短信验证码填写错误"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step7</strong> 同图片验证码一样，在redis数据库中进行删除，防止一个短信验证码多次使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    redis_store.delete(<span class="string">"sms_code_%s"</span> % mobile)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    current_app.logger.error(e)</span><br></pre></td></tr></table></figure><ul><li><strong>step8</strong> 判断用户的手机号是否注册过</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190110091124408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step9</strong> 将用户注册的数据保存到mysql数据库中，这时候为了减少数据库的查询，不增加程序运行的负荷，所以我们在判断用户手机号是否注册过的时候，不再进行查询，而是在保存用户注册数据时候，判断手机号码是否存在，因之前在models中创建数据库表时，将mobile字段的数据设置为唯一约束，所以当数据库ih_user_profile表中已存在mobile字段的数据时，再进行插入相同手机号mobile的数据时，mysql数据库则会抛出异常，那么我们就利用数据库抛出的异常来判断手机号码是否存在，从而减少在视图函数中数据库的查询</li></ul><p>数据库测试mobile字段异常</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190110093442168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step10</strong> 注释step8代码重新编写，大体如下，因密码需要进行加密后再存到数据库，所以到最后面再进行处理</li></ul><p><strong>说明：</strong>这里的注册名为手机号，后面会另写接口让name为名字昵称，当出现异常时候，需要进行数据库回滚操作</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190110100506671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step11</strong> 将登陆状态保存到session中，并返回注册成功结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">session[<span class="string">"name"</span>] = mobile</span><br><span class="line">session[<span class="string">"mobile"</span>] = mobile</span><br><span class="line">session[<span class="string">"user_id"</span>] = user.id</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> jsonify(errno=RET.OK, errmsg=<span class="string">"注册成功"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step12</strong> 将用户输入的密码进行加密</li></ul><p><strong>说明：</strong>将对用户输入的密码添加salt值(盐值)，再进行加密存储，说白了就是，在户输入的密码基础上再添加一个随机生成的字符串，即使用户1和用户2密码一样，但在进行salt处理后，在数据库中也不会相同，不存在撞库说法，这样做安全性极高，即使密码泄露，破解出来后也并不是用户的真是密码</p><p><strong>问题：</strong>反过来当用户注册成功后，进行用户登录时，那么这个密码是如何进行判断？是将用户输入的密码进行加密后再和数据库加密密码进行对比，可是当初在注册时对用户输入的密码进行加密时候添加了随机的salt值，所以这里需要注意思考一下，我们这里的想法是通过在注册时候将salt值进行保存在数据库中另起一个字段，这是其一方法，其二是将这个salt值与加密后的密码中间以某个分隔符进行分隔，这样做的话就不用再创建表字段另存salt值，如qwe@ohcuncacaucaooa08c03qoca08q08，@符前为salt值，后为用户加密后的密码</p><p><strong>注：</strong>MD5已被攻破，利用暴力测试以及算法公式成功反推出加密前的密码，sh1估计等不了几年就会被破解，我们这里使用的是sha256进行密码的加密</p><p>①在models文件中通过导入werkzeug.security类中的generate_password_hash方法将密码进行加密，并存到数据库中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_password_hash</span><span class="params">(self, origin_password)</span>:</span></span><br><span class="line">    self.password_hash = generate_password_hash(origin_password)</span><br></pre></td></tr></table></figure><p>②在passport文件中，在构建User对象的时候，通过调用models文件中的generate_password_hash方法，将前端用户输入的password传参给此方法，并保存到User模型类的passwor_hash字段中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.generate_password_hash(password)</span><br></pre></td></tr></table></figure><p>4.property装饰器的使用</p><ul><li><strong>step1</strong> 将函数调用转换为对象属性设置（在passport文件中）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.password = password</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 在models中注释之前的generate_password_hash方法的调用，使用property装饰器对新创建的password函数装饰为password属性(注，在passport文件中user.password对象的password属性名要与models文件中的方法同名)，再通过password属性的setter方法，设置类属性的值，这个值就是我们在passport文件中通过user.password = password这个password值</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190110123210526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="四丶注册后端测试"><a href="#四丶注册后端测试" class="headerlink" title="四丶注册后端测试"></a>四丶注册后端测试</h1><ul><li><strong>step1</strong> 因测试users注册后端接口使用的POST请求方式，而此时还没有编写注册前端端口测试，所以需要在ihome/init文件中将csrf后端机制关闭，再进行测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 为flask补充csrf防护</span><br><span class="line"># CSRFProtect(app)</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 运行程序，在浏览器输入<a href="http://127.0.0.1:5000/register.html，进入注册页面" target="_blank" rel="noopener">http://127.0.0.1:5000/register.html，进入注册页面</a></li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190110130521369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 在注册页面输入错误手机号，正确的图片验证码，当点击获取短信验证码时候，会提示发送短信失败，无所谓，我们从redis数据库直接读取sms_code即可</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190110130737547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 在redis数据库中获取短信验证码(因为在上一步输入的是错误手机号，导致无法发送短信，测试无所谓嘛)</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190110130954105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step5</strong> 在测试工具Postman中，添加127.0.0.1:5000/api/v1.0/users地址，构造json格式的body体数据，就是我们注册页面所需要的数据，成功返回注册成功响应数据，代表注册后端接口没问题</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/2019011013131489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step6</strong> 响应数据表示注册成功后，查看数据库ih_user_profile表信息，第一条数据是之前测试使用的</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190110132045476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="五丶注册前端编写"><a href="#五丶注册前端编写" class="headerlink" title="五丶注册前端编写"></a>五丶注册前端编写</h1><p>1.前端注册HTML代码（不展示）</p><p>2.前端注册JS代码（不展示）</p><p>3.在register.js文件中通过ajax方式向后端接口发送注册请求（在callback for submit()）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用ajax向后端发送注册请求</span></span><br><span class="line">        <span class="keyword">var</span> req_data = &#123;</span><br><span class="line">            mobile:mobile,</span><br><span class="line">            sms_code:phoneCode,</span><br><span class="line">            password:passwd,</span><br><span class="line">            password2:passwd2</span><br><span class="line"> </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> req_json = <span class="built_in">JSON</span>.stringify(req_data)</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"/api/v1.0/users"</span>,</span><br><span class="line">            type:<span class="string">"post"</span>,</span><br><span class="line">            data:req_json,</span><br><span class="line">            contentType:<span class="string">"application/json"</span>,</span><br><span class="line">            dataType: <span class="string">"json"</span>,</span><br><span class="line">            headers:&#123;</span><br><span class="line">              <span class="string">"X-CSRFToken"</span>:getCookie(<span class="string">"csrf_token"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (resp.errno== <span class="string">"0"</span>)&#123;</span><br><span class="line">                    <span class="comment">// 注册成功，即跳转到主页</span></span><br><span class="line">                    location.href = <span class="string">"/index.html"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    alert(resp.errmsg);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>4.在js构建一个getCookie的方法来获取前端名为csrf_token的cookie的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">document</span>.cookie.match(<span class="string">"\\b"</span> + name + <span class="string">"=([^;]*)\\b"</span>);</span><br><span class="line">    <span class="keyword">return</span> r ? r[<span class="number">1</span>] : <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.将获取的cookie的值，放在请求头中的X-CSRFToken键中，方便后端进行csrf验证（需将ihome/init中的CSRF验证开启）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">headers:&#123;</span><br><span class="line">          <span class="string">"X-CSRFToken"</span>:getCookie(<span class="string">"csrf_token"</span>)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><h1 id="六丶用户注册功能测试"><a href="#六丶用户注册功能测试" class="headerlink" title="六丶用户注册功能测试"></a>六丶用户注册功能测试</h1><p>1.进行注册测试，输入不存在的号码是为了演示给大家，虽然提示发送短信验证码失败，但我可以从redis数据库去拿取短信验证码，注册成功后，即跳转到登录页面</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190110171730944.gif" alt></fancybox></p><p>2.用户注册成功后，查看数据库中ih_user_profile表的内容，成功将用户注册信息保存到数据库</p><p><fancybox><img src="https://img-blog.csdnimg.cn/2019011017351791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><br><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/85934776" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/85934776</a></p>]]></content>
      
      
      <categories>
          
          <category> Flask开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask网站实战开发 </tag>
            
            <tag> 手机端租房网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask项目之手机端租房网站的实战开发（五）</title>
      <link href="/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶图片验证码前端编写"><a href="#一丶图片验证码前端编写" class="headerlink" title="一丶图片验证码前端编写"></a>一丶图片验证码前端编写</h1><p>1.当用户进入到注册页后，页面进行刷新，所以在static前端静态资源register.js中定义一个generateImageCode函数，当页面加载完后，形成图片验证码的后端地址， 设置到页面中，让浏览请求验证码图片，同理在register.html中onclick点击验证码图片时，也要触发generateImageCode函数</p><p><strong>register.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon image-code"</span> ο<span class="attr">nclick</span>=<span class="string">"generateImageCode();"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>register.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    generateImageCode();&#125;</span><br></pre></td></tr></table></figure><p>2.生成图片验证码编号两种方式：第一种是时间轴；第二种是UUID全局唯一标识符，这里我们使用UUID</p><ul><li><strong>step1</strong> 在js中获取UUID的值（这里在网上找的一个代码）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateUUID</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.performance &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.performance.now === <span class="string">"function"</span>)&#123;</span><br><span class="line">        d += performance.now(); <span class="comment">//use high-precision timer if available</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> uuid = <span class="string">'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'</span>.replace(<span class="regexp">/[xy]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = (d + <span class="built_in">Math</span>.random()*<span class="number">16</span>)%<span class="number">16</span> | <span class="number">0</span>;</span><br><span class="line">        d = <span class="built_in">Math</span>.floor(d/<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> (c==<span class="string">'x'</span> ? r : (r&amp;<span class="number">0x3</span>|<span class="number">0x8</span>)).toString(<span class="number">16</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> uuid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 在generateImageCode函数中调用generateUUID，将生成的UUID赋值给imageCodeId变量，记得先使用var在函数外声明该变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateImageCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 生成图片验证码编号</span></span><br><span class="line">    imageCodeId = generateUUID();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.拼接二维码图片的url地址，设置register.html中图片二维码div标签class=image_code下的img标签的src地址为拼接后的url，也就是二维码图片的链接地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">"/api/v1.0/image_codes/"</span> + imageCodeId;</span><br><span class="line">   $(<span class="string">".image-code img"</span>).attr(<span class="string">"src"</span>, url);</span><br></pre></td></tr></table></figure><p>4.运行程序，清除浏览器缓存，输入<a href="http://127.0.0.1:5000/register.html" target="_blank" rel="noopener">http://127.0.0.1:5000/register.html</a>后，查看注册页面二维码生成是否成功</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105174855460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>5.在后端redis数据库中成功生成image_code_uuid的key了</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105175220758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>6.效果图，鼠标连续点击图片验证码，请注意验证码</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105180758761.gif" alt></fancybox></p><h1 id="二丶短信验证码后端编写"><a href="#二丶短信验证码后端编写" class="headerlink" title="二丶短信验证码后端编写"></a>二丶短信验证码后端编写</h1><p>1.发送短信服务介绍，这里使用的是容联云，云通讯</p><ul><li><strong>step1</strong> 需要在官网<a href="https://www.yuntongxun.com/" target="_blank" rel="noopener">https://www.yuntongxun.com/</a>进行注册，注册时会通过打电话形式告诉你验证码，注册成功后会赠送8元测试费用，如下图</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105182249832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 然后选择测试平台，添加测试手机号，最多三个，验证成功才能添加上 </li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105182811413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 进入开发文档—Rest API—-短信—-短信发送接口，具体文档说明请到官网自寻查看</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105183426568.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 我们直接去下载官方给开发人员封装好的工具SDK，找到Demo示例，然后在文章上方点击Demo下载，找到python语言对应的SDK进行下载即可</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105184630743.png" alt></fancybox></p><ul><li><strong>step5</strong> 解压后的目录文件如下，请查看README.txt等说明文件，DEMO问案列，这里我们只需要将SDK文件拷贝到项目中的libs目录下，并命名为yuntongxun，然后再将DEMO文件夹中的SendTemplateSMS.py文件拷贝到yuntongxun目录下</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105185110256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>2.封装发送短信辅助工具</p><ul><li><strong>step1</strong> 在libs以及云通讯目录下创建init文件，使其变成python的包</li></ul><p><img src="https://img-blog.csdnimg.cn/2019010611572470.png" alt></p><ul><li><strong>step2</strong> 在SendTemplateSMS.py文件中创建一个CCP的类，用于封装发送短信的辅助类，目的是在我们调用sendTemplateSMS方法的时候，只初始化一次REST SDK，使用python单例达到不管创建多少个对象，都只初始化一次</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106121920408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 将云通讯开发者主账号中的ACCOUNT SID和AUTH TOKEN以及AppID，复制到代码中</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106122431980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 编写测试脚本，内容分为验证码9527，有效期5分钟，使用测试模板1</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106122739892.png" alt></fancybox></p><ul><li><strong>step5</strong> 运行sendTemplateSMS程序，最下面的statusCode为000000，代表短信发送成功，在官网短信接口有详细说明</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106125231272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step6</strong> 此时手机便收到了短信</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106123637876.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><ul><li><strong>step7</strong> 修改代码，不需要使用官方的代码将result字典数据进行遍历打印，而是只获取状态statusCode进行判断，如果为000000代表发送成功返回0，否则发送失败返回-1</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/2019010612460514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p><strong>查看运行结果，验证逻辑没有问题</strong></p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106125018343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step8</strong> 将sendTemplateSMS重命名为sendSMS，为了后面使用方便 </li></ul><p>3.定义获取短信接口</p><ul><li><strong>step1</strong> 在接口文件verify_code中定义一个get_sms_code的视图函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sms_code</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 构建路由规则，同理与构建图片验证码一样，使用restful风格，并且需要有一个短信验证码的编码，以手机进行编号，之前在分析图片验证码时，已经说过发送短信验证码时需携带图片验证码的文本内容以及图片验证码的编号，所以路由如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /api/v1.0/sms_codes/&lt;mobile&gt;?image_code=xxxx&amp;image_code_id=xxxx</span></span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 获取image_code以及image_code_id</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image_code = request.args.get(<span class="string">"image_code"</span>)</span><br><span class="line">image_code_id = request.args.get(<span class="string">"image_code_id"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 校验参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 校验参数</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> all([image_code, image_code_id]):</span><br><span class="line">    <span class="comment"># 参数不完整返回对应错误</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(errno=RET.PARAMERR, errmsg=<span class="string">"参数不完整"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 业务逻辑处理，从redis数据库取出验证码与用户输入的验证码进行校验，期间需要对验证码是否存在进行判断</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106133815681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step6</strong> 接下来判断手机号是否存在</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106135630145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step7</strong> 随机生成6位数验证码（使用字符串格式化的方式来生成，从0到999999，当不足6位时，以0做填充）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sms_code = <span class="string">"%06d"</span> % random.randint(<span class="number">0</span>, <span class="number">999999</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step8</strong> 在redis数据库中保存真实的短信验证码</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106141216779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step9</strong> 发送短信</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/2019010614205175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step10</strong> 异常说明</li><li>放在try与except中的代码越少越好，会影响程序执行效率</li></ul><h1 id="三丶测试向后端接口发送短信验证码"><a href="#三丶测试向后端接口发送短信验证码" class="headerlink" title="三丶测试向后端接口发送短信验证码"></a>三丶测试向后端接口发送短信验证码</h1><ul><li><strong>step1</strong> 打开Postman测试工具，发送接口路由127.0.0.1:5000/api/v1.0/sms_codes/180xxxxxx96?image_code&amp;image_code_id</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106143738143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 运行项目</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106144020662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 在浏览器输入<a href="http://127.0.0.1:5000/register.html" target="_blank" rel="noopener">http://127.0.0.1:5000/register.html</a>，进入项目注册页面</li></ul><p><img src="https://img-blog.csdnimg.cn/20190106144257844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></p><ul><li><strong>step4</strong> 回到Postman工具，取消参数，什么都不传的情况下，出现如下错误信息，就是我们在程序中定义的错误信息</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106144512465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step5</strong> 此时刷新<a href="http://127.0.0.1:5000/register.html" target="_blank" rel="noopener">http://127.0.0.1:5000/register.html</a>注册页，查看验证码，并在redis数据中获取验证码</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106144823413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>获取redis数据库中图片验证码的文本值与注册页图片二维码的值一样</p><p><fancybox><img src="https://img-blog.csdnimg.cn/2019010614495632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step6</strong> 当过了180s后也就是我们在constants.py中设置的图片验证码有效期，在Postman工具中发送地址，提示 我们定义的错误图片验证码失效，在程序中的逻辑为无法在redis数据库中获取image_code_id键的值，或者说不存在此键，返回结果为None</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106151105878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step7</strong> 刷新注册页面，获取新的验证码，在Postman工具中向错误号码发送验证码，或者说是未在云通讯测试平台关联的号码发送验证码，则出现以下错误提示，这个提示就是我们在接口文件中写的res不等于0的时候，返回错误的json格式的错误信息</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106151511883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step8</strong> 刷新<a href="http://127.0.0.1:5000/register.html" target="_blank" rel="noopener">http://127.0.0.1:5000/register.html</a>，将最新的验证码存储到redis数据库，在Postman工具中向正确地址发送正确号码，返回的响应数据为发送成功，如下图所示</li></ul><p>注册页界面</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106150527267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>redis数据库中的图片验证码值</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106150716882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>Postman响应数据</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190106150920302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><br><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/85858348" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/85858348</a></p>]]></content>
      
      
      <categories>
          
          <category> Flask开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask网站实战开发 </tag>
            
            <tag> 手机端租房网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask项目之手机端租房网站的实战开发（四）</title>
      <link href="/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶在项目中添加静态资源文件"><a href="#一丶在项目中添加静态资源文件" class="headerlink" title="一丶在项目中添加静态资源文件"></a>一丶在项目中添加静态资源文件</h1><p>1.将静态资源文件拷贝到项目static目录下</p><p><img src="https://img-blog.csdnimg.cn/20190103182543887.png" alt></p><p>2.在终端上运行项目python manage.py runserver</p><p>3.在浏览器中输入<a href="http://127.0.0.1:5000/static/html/index.html" target="_blank" rel="noopener">http://127.0.0.1:5000/static/html/index.html</a> 访问前端主页，如下图</p><p>4.当在不使用nginx服务器给用户提供静态资源，而是以flask来提供，当用户在浏览器中输入/static/html/index.html就会显得不友好，正常来说访问主页只需要输入ip地址或者是域名加端口号就可以了，那么就需要我们专门写个视图函数来提供有好的链接地址，把地址前缀给去掉</p><p>5.创建一个蓝图，专门负责提供静态文件的</p><ul><li><strong>step1</strong> 在ihome目录下创建一个web_html.py文件</li><li><strong>step2</strong> 创建蓝图html</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html = Blueprint(<span class="string">"web_html"</span>, __name__)</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 在utils目录下创建一个<strong>init</strong>.py文件，使这个目录变成python的包，然后在这个utils包中创建commons.py文件，作为通用工具，在里面定义一个正则转换器</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103190633551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 在ihome/init文件中，在创建app对象时候，将ReConverter对象添加到app中</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103191845194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step5</strong> 回到commons.py文件中，定义视图函数get_html</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103202322441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step6</strong> 在ihome/init中进入此蓝图注册</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/2019010320331332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step7</strong> 启动项目</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><ul><li><strong>step8</strong> 清除网页缓存数据</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103204049753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step9</strong> 在浏览器地址栏输入<a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a>就直接跳转到主页了index.html了</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103204456703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step10</strong> 输入<a href="http://127.0.0.1:5000/register.html" target="_blank" rel="noopener">http://127.0.0.1:5000/register.html</a>也是没有问题的，直接跳转到register.html</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103204801217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="二丶关于csrf防护机制"><a href="#二丶关于csrf防护机制" class="headerlink" title="二丶关于csrf防护机制"></a>二丶关于csrf防护机制</h1><p>1.csrf验证机制：从cookie中获取一个csrf_token的值，再从请求体中获取一个csrf_token的值，如果这两个值相同，则检<br>验通过，可以进入视图函数中执行，如果两个值不同，则检验失败，会想前端返回状态码404的错，之前在ihome/init中设置的csrf只是负责验证，并不负责cookie与请求体中的csrf_token的值从哪里来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为flask补充csrf防护</span></span><br><span class="line">CSRFProtect(app)</span><br></pre></td></tr></table></figure><p>2.分析：前后端不分离时跟django一样直接在模板中进行设置csrf，而我们这个项目使用的是前后端分离，没有模板，对于cookie我们可以提前进行设置csrf_token，然后对于请求体中的cookie而言，当 发送POST请求时，就将那时候的请求体数据中设置csrf_token这样就能csrf防护了</p><p>3.设置cookie中的csrf_token</p><ul><li><strong>step1</strong> 为web_html.py中导入csrf包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> csrf</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 创建一个csrf_token的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrf_token = csrf.generate_csrf()</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 导入make_response，将返回的静态文件方法的值构建成响应对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp = make_response(current_app.send_static_file(html_file_name))</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 设置cookie的值，有效期为临时会话</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.set_cookie(<span class="string">"csrf_token"</span>, csrf_token)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 重新启动程序，刷新网页，查看我们设置的cookie</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105123419378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="三丶用户注册模块（图片验证码以及短信验证码）"><a href="#三丶用户注册模块（图片验证码以及短信验证码）" class="headerlink" title="三丶用户注册模块（图片验证码以及短信验证码）"></a>三丶用户注册模块（图片验证码以及短信验证码）</h1><p>1.图片验证码使用流程</p><ul><li><strong>step1</strong> 分析流程：</li></ul><p>第一步，需要前端像后端发起一个获取图片验证码的请求，对于后端来说就需要去生成一个随机的验证码图片；第二步将生成的验证码图片返回给前端；第三步验证图片验证码的准确性，如果正确，才能发起获取短信验证码的请求</p><ul><li><strong>step2</strong> 具体细节</li></ul><p>在发起获取短信验证码请求的时候将携带填写的图片验证码与后端生成的图片验证码进行校验，因此后端在生成图片验证码的时候，需要将图片进行保存，意义是为了与用户输入的图片验证码进行对比，对比成功，才会给用户返回短信验证码</p><ul><li><strong>step3</strong> 问题分析</li></ul><p>后端生成的图片验证码是存在哪里，谁来维护有效期，不可能一张图片一直用下去，所以将在后端生成的图片验证码，存到redis数据库中，在后端进行验证的时候，就从redis中取出这个值，与前端用户输入的值进行对比即可；但是对于多个用户来说同一时间向我发送获取图片验证码时，该怎么去判断谁是谁的，所以要将图片验证码进行编号处理，来分辨是属于哪个用户的图片验证码，那么就需要在用户发起短信验证码请求的携带参数里面除了填写的图片验证码，还需要携带一个用户编号，因此对于后端服务器来说，除了生成图片验证码的值，还需要生成一个对应验证码的编码，一起保存到redis数据库中，还需要将验证码值和编码返回给前端用户，那么就需要从返回的响应体中取解析编码，这样做太麻烦了，为了减轻后端的压力，将不再由后端去生成这个编码了，而是由前端在一开始就去生成这个编号，再前端向后端服务器发起获取图片验证码请求的时候携带一个编码参数，然后后端将编码和图片验证码的值一起存到redis数据库中</p><ul><li><strong>step4</strong> 在ihome/api_1_0目录下创建一个verify_code.py文件，将图片验证码以及短信验证码放在这个文件里面进行使用</li><li><strong>step5</strong> 使用restful风格构建前端向后端发起图片验证码请求地址</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://127.0.0.1:5000/api/v1.0/image_codes/<span class="tag">&lt;<span class="name">image_code_id</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.图片验证码后端接口编写</p><ul><li><strong>step1</strong> 将图片验证码工具包captcha拷贝到ihome/utils目录下</li><li><strong>step2</strong> 在verify.py中导入captcha包中的captcha模块中的captcha对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ihome.utils.captcha.captcha <span class="keyword">import</span> captcha</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 通过调用captcha对象中的generate_captcha方法来获取生成的验证码名字，文本内容，以及图片二进制数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name, text, image_data = captcha.generate_captcha()</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 选择存储数据类型，将验证码的文本内容以及编码存到redis数据库中，并设置有效期</li></ul><p>可以使用哈希格式进行存储，但是无法设置单个图片的有效期</p><p>示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"image_codes": &#123;"id1":"abc", "":""&#125; 哈希  hset("image_codes", "id1", "abc")  hget("image_codes", "id1")</span><br></pre></td></tr></table></figure><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105143246359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>使用字符串格式对数据进行存储，以编码作为key，以文本内容作为value值进行存储即可</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"image_code_编号1"</span>: <span class="string">"真实值"</span></span><br><span class="line"><span class="string">"image_code_编号2"</span>: <span class="string">"真实值"</span></span><br><span class="line">redis_store.set(<span class="string">"image_code_%s"</span> % image_code_id, text)</span><br><span class="line">redis_store.expire(<span class="string">"image_code_%s"</span> % image_code_id, constants.IMAGE_CODE_REDIS_EXPIRES)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 在verify.py中导入redis数据库连接对象，然后将编码和文本内容存到redis数据库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ihome <span class="keyword">import</span> redis_store</span><br><span class="line"> </span><br><span class="line">redis_store.set(<span class="string">"image_code_%s"</span> %image_code_id, text)</span><br></pre></td></tr></table></figure><ul><li><strong>step6</strong> 设置图片验证码有效期为三分钟，首先在ihome目录下创建一个constants.py文件，用于存放常量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis_store.expire(<span class="string">"image_code_%s"</span> %image_code_id, constants.IMAGE_CODE_REDIS_EXPIRES)</span><br></pre></td></tr></table></figure><p>设置值和有效期一步到位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis_store.setex(<span class="string">"image_code_%s"</span> %image_code_id, constants.IMAGE_CODE_REDIS_EXPIRES, text)</span><br></pre></td></tr></table></figure><ul><li><strong>step7</strong> 对于数据库连接，可能会出现连接错误以及连接不上等问题，所以需要捕获异常，并且将捕获到的异常保存到日志中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current_app.logger.error(e)</span><br></pre></td></tr></table></figure><ul><li><strong>step8</strong> 当出现异常后，需要返回错误信息的json数据，先将工程项目定义好的response_code.py响应状态码文件，拷贝到utils中</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105152126878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> jsonify(errno=RET.DBERR, errmsg=<span class="string">"save image code failed"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step9</strong> 没有出现异常，则先通过make_response构造图片image_data数据响应体对象，再设置该响应体对象的请求头中的Content-Type为图片格式jpg，返回给前端</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105153136818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105153136818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>3.开发流程与编写接口文档</p><ul><li><strong>step1</strong> 开发流程</li></ul><ol><li>分析需求</li><li>编写代码</li><li>编写单元测试</li><li>自测</li><li>编写接口文档</li><li>提测代码</li></ol><ul><li><strong>step2</strong> 编写接口文档</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">接口文档</span><br><span class="line"> </span><br><span class="line">1. 接口名字</span><br><span class="line">2. 描述（描述清楚接口的功能）</span><br><span class="line">3. url</span><br><span class="line">4. 请求方式</span><br><span class="line">5. 传入参数</span><br><span class="line">6. 返回值</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">接口：获取图片验证码</span><br><span class="line"> </span><br><span class="line">描述：前端访问，可以获取到验证码图片</span><br><span class="line"> </span><br><span class="line">url： /api/v1.0/image_codes/&lt;image_code_id&gt;</span><br><span class="line"> </span><br><span class="line">请求方式： GET</span><br><span class="line"> </span><br><span class="line">传入参数：</span><br><span class="line">    格式：路径参数 （参数是查询字符串、请求体的表单、json、xml）</span><br><span class="line"> </span><br><span class="line">    名字             类型       是否必须      说明</span><br><span class="line">   image_code_id    字符串       是         验证码图片的编号</span><br><span class="line"> </span><br><span class="line">返回值：</span><br><span class="line">    格式： 正常：图片， 异常：json</span><br><span class="line"> </span><br><span class="line">    名字             类型       是否必传      说明</span><br><span class="line">    errno          字符串         否        错误代码</span><br><span class="line">    errmsg         字符串         否        错误内容</span><br><span class="line"> </span><br><span class="line">    实例：</span><br><span class="line">    &apos;&#123;&quot;errno&quot;: &quot;4001&quot;, &quot;errmsg&quot;: &quot;保存图片验证码失败&quot;&#125;&apos;</span><br></pre></td></tr></table></figure><h1 id="四丶测试后端verify-code接口是否正确"><a href="#四丶测试后端verify-code接口是否正确" class="headerlink" title="四丶测试后端verify_code接口是否正确"></a>四丶测试后端verify_code接口是否正确</h1><p>1.需要在api_1_0/init中导入我们写的接口文件verify_code让蓝图知道有一个verify_code的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> verify_code</span><br></pre></td></tr></table></figure><p>2.运行程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>3.在浏览器中输入<a href="http://127.0.0.1:5000/api/v1.0/image_codes/123" target="_blank" rel="noopener">http://127.0.0.1:5000/api/v1.0/image_codes/123</a>，成功显示出验证码图片</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105160824559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>4.查看程序运行日志</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105161222426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>5.此时查看redis数据库中，会发现出现了一个image_code_123的键，获取该键的值就是图片验证码的文本值，说明我们写的后端接口没问题</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190105161126833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><br><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/85706012" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/85706012</a></p>]]></content>
      
      
      <categories>
          
          <category> Flask开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask网站实战开发 </tag>
            
            <tag> 手机端租房网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask项目之手机端租房网站的实战开发（三）</title>
      <link href="/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶关于在项目中循环导入的问题"><a href="#一丶关于在项目中循环导入的问题" class="headerlink" title="一丶关于在项目中循环导入的问题"></a>一丶关于在项目中循环导入的问题</h1><p>1.在上一篇中创建api_1_0蓝图下的demo.py视图函数文件中，肯定会用到导入数据库db的，那么就会出现flask项目循环导包的问题，当启动项目时，会提示cannot import name db，这个提示就是代表循环导入包的问题</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103094333118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>2.针对flask项目出现此问题的解决方法</p><ul><li><strong>step1</strong> 分析导包流程，首先在manage.py启动文件中，程序从上往下执行，一开始就从ihome包下导入数据库连接对象db，然后进入到ihome\init.py文件中，同理执行到从ihome导入蓝图目录api_1_0时，即进入api_1_0\init.py文件中，执行到导入相对路径下demo文件时，回到demo.py文件中，在该文件中从ihome包下导入db时，就会发现此时在ihome\init.py文件中，并还没有执行到创建数据库db对象，所以程序执行到这一步时，就会提示以上错误</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103095226172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 解决方法，选择推迟导入，修改代码在什么时候需导入api_1_0时，我们就在什么后导入即可，发现在create_app方法中在注册蓝图的时候才需要导入api_1_0，所以将导入代码，放到此处即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册蓝图</span></span><br><span class="line"><span class="keyword">from</span> ihome <span class="keyword">import</span> api_1_0</span><br><span class="line">app.register_blueprint(api_1_0.api, url_prefix=<span class="string">"/api/v1.0"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 再次启动项目，就不会提示cannot import name db 了，成功解决flask项目中循环导入包的问题</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103100935291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt><fancybox></fancybox></fancybox></p><p>3.一个完整的项目工程还需要在核心目录下创建项目所需的目录，用来分别存放包和库的，所以需在ihome目录下创建utils目录用来存放项目所需的工具包以及工具函数等，然后再创建一个libs目录用来存放第三方的库，不是通过pip install 安装的库，而是源码安装的库，这样才是完整的实战工程项目</p><p><fancybox><img src="https://img-blog.csdnimg.cn/2019010310244261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="二丶日志功能实现"><a href="#二丶日志功能实现" class="headerlink" title="二丶日志功能实现"></a>二丶日志功能实现</h1><p>1.一个正常的网站包括软件等，都会有日志来记录历史操作信息等，在公司中一般会将存放日志目录与工程目录隔离开，这里为了方便演示，即将日志目录和工程目录放到一起，在项目根目录创建logs目录，用来存放日志文件</p><p>2.因为flask框架没有去提供日志这一块的库以及工具，所以我们就是用python记录日志标准库logging来进行日志记录保存</p><ul><li><strong>step1</strong> 在ihome/init文件中导入logging库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 并配置日志信息以及设置日志等级</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/201901031046120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 配置后日志信息后，需要在api_1_0/demo视图函数中进行记录日志，有两种方法，第一种是直接在demo文件中使用logging标准库模块，第二种是使用flask 框架中的全局上下文current_app对象，为什么能使用current_app对象，因为这个对象把logging模块中的logger塞到了这个对象中了</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103110900127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 启动项目，在浏览器输入<a href="http://127.0.0.1:5000/api/v1.0/index测试日志是否成记录并写入到logs目录下的log文件中" target="_blank" rel="noopener">http://127.0.0.1:5000/api/v1.0/index测试日志是否成记录并写入到logs目录下的log文件中</a></li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103111349442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>成功在logs目录下创建log日志文件，并将日志信息写入到该文件中 </p><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103111620941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p><strong>注： 在开发环境develop中配置了DEBUG=True调试模式下，会导致我们配置的日志等级，不生效，flask会强制忽略到我们配置的日志信息</strong></p><h1 id="三丶项目数据库设计"><a href="#三丶项目数据库设计" class="headerlink" title="三丶项目数据库设计"></a>三丶项目数据库设计</h1><h3 id="1-分析项目所需要的表"><a href="#1-分析项目所需要的表" class="headerlink" title="1.分析项目所需要的表"></a>1.分析项目所需要的表</h3><ul><li><p><strong>step1</strong> 用户表User，先从注册界面来说，需要哪些字段(user_id，作为主键，手机号mobile，用户名name，密码password，存放头像的路径avatar_url，用户真实姓名real_name，真实身份证号real_id_card，验证码图片存到redis数据库即可)</p></li><li><p><strong>step2</strong> 房子表House，字段(house_id，作为主键，user_id，与用户表主键id保持一致，作为外键关联哪个用户的房子，一个用户有多套房子一对多关系，房子标题title，房子所在区域area_name，通过创建的Area表所以这里将area_name改为area_id通过外键来查询即可)<br>思考：当查询房屋表中某个区域的数据时，select distinct area_name from house并去重，当数据很少的时候可以这样进行查询，随着时间推移导致数据达到几千万时，那么通过这样的方式查询数据，时间就会很长，不利于用户体验，所以这里需再创建一个区域表Area来解决查询时间过长的问题</p></li><li><p><strong>step3</strong> 区域表Area，字段(area_id，作为主键，name区域名，price价格，image_url1,image_url2…)，Area表对于House表也是一对多关系，一个区域多个房子<br>思考：在第四步我们将图片链接地址存到Area表中，那么今后如果用户上传图片扩大为10张，那么就需要改表结构，这样不是明智的选择，所以另建一个House_Image表来存储用户上传的房屋图片</p></li><li><p><strong>step4</strong> 房屋图片表House_Image，字段(image_id，作为主键，url图片地址，house_id外键)，房子House表对于图片地址House_Image表一对多关系，一个房子有多张图片<br>思考：分析需求，发现只有房屋详情时才会查询多张图片，而在查询列表和主页图片时，只需要一张，那么我们在房子表House中需添加一个index_image_url字段，这样做的目的是减少关联查询，在数据库中以空间换时间的理念来减少查询时间</p></li><li><p><strong>step5</strong> 房屋配套设施表Facility，字段(facility_id，作为主键，name设施名字)<br>思考：设施表Facility与房屋表House是多对多关系，一个设施如冰箱可以在多个不同房子中拥有，一个房子同时也可以拥有多个设备设施如电视，空调，wifi等，那么存储多对多关系的表数据，就需要创建一个中间表</p></li><li><p><strong>step6</strong> 创建中间表House_Facility表，字段(id，作为主键，外键house_id和facility_id)</p></li><li><p><strong>step7</strong> 客户订单表Order，字段(order_id，作为主键，外键user_id哪个用户和house_id哪个房子，create_time订单创建时间，start_date入住日期，end_date离开日期，price房屋单价，amount合计金额，days入住天数，status订单状态，comment评价)</p></li></ul><p><strong><font color="red">思考1</font></strong>：之所以要在Order订单表中创建price字段是考虑到比如房东在第二天需要将房屋价格上涨或者下降，保证用户是按实时价格进行计算的，加入amount不仅是为了前端，重要的是为了后期运营人员进行统计方便，节省统计的开销<br>问题：关于房东拒绝订单是否填写拒绝原因，设定是必须填写拒绝原因，那么是需要在Order 表中添加一个字段么？<br>分析：因为一旦填写拒绝原因那么就不存在comment评价了，所以这拒绝原因和评价两个关系为互斥关系，所以我们这里不添加拒绝原因字段，当有了评论信息那么肯定就不会出现拒绝原因，可以通过订单状态status来判断是评价还是拒绝原因<br><strong><font color="red">思考2</font></strong>： 当在房源搜索房屋的时候，会出现按照最新上线，入住最多，价格高低排序，当按照入住最多排序时，那么就是相当于按照订单量最多的房屋进行排序，那么就需要在Order表中按照订单量来进行排序，首先就需要根据入住时间和区域来来进入过滤查询，还要将查询的结果安装订单量进行排序，这样查询代价就比较大了，那么同理还是使用以空间换时间的概念，在House表中添加order_count来订单量，当没下一单就在对应的order_count的值加1，回过来通过直接查询House表中的order_count字段按大小排序就能查询到订单最多的房屋了</p><h3 id="2-在models-py中创建数据库抽象模型类"><a href="#2-在models-py中创建数据库抽象模型类" class="headerlink" title="2.在models.py中创建数据库抽象模型类"></a>2.在models.py中创建数据库抽象模型类</h3><ul><li><strong>step1</strong> 定义BaseModel模型基类，用于为每个模型添加创建时间和更新时间</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103142544796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 定义User用户表</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103141219350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3</strong> 定义Area城区表</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103141348841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 定义House房屋表</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103142335909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step5</strong> 定义Facility设施表</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103144041300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step6</strong> 定义HouseImage房屋图片表</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103144232890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step7</strong> 定义Order订单表</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/2019010314435715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="四丶数据库迁移"><a href="#四丶数据库迁移" class="headerlink" title="四丶数据库迁移"></a>四丶数据库迁移</h1><ul><li><strong>step1</strong> 初始化数据库对象db</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103155155636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 执行迁移文件，结果提示No change in…..</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103155706868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>解决：因为models.py文件对于其他文件来说，并不知道它的存在，所以只需要在视图文件demo中导入models即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ihome <span class="keyword">import</span> db, models</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 再次执行迁移 ，则显示迁移成功</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103160145627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 执行升级，将数据写入到mysql中的ihome_python数据库中</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103160804362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step5</strong> 以上步骤完成后，进入mysql，使用ihome_python数据库，查询数据库表成功生成 </li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190103161251719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><br><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/85676643" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/85676643</a></p>]]></content>
      
      
      <categories>
          
          <category> Flask开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask网站实战开发 </tag>
            
            <tag> 手机端租房网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask项目之手机端租房网站的实战开发（二）</title>
      <link href="/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶创建项目"><a href="#一丶创建项目" class="headerlink" title="一丶创建项目"></a>一丶创建项目</h1><h4 id="1-新建ihome-python项目文件夹"><a href="#1-新建ihome-python项目文件夹" class="headerlink" title="1.新建ihome_python项目文件夹"></a>1.新建ihome_python项目文件夹</h4><p><fancybox><img src="https://img-blog.csdnimg.cn/20190102164323467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h4 id="2-在Pycharm中打开此文件-，并配置项目解释器-python2环境"><a href="#2-在Pycharm中打开此文件-，并配置项目解释器-python2环境" class="headerlink" title="2.在Pycharm中打开此文件 ，并配置项目解释器(python2环境)"></a>2.在Pycharm中打开此文件 ，并配置项目解释器(python2环境)</h4><p><fancybox><img src="https://img-blog.csdnimg.cn/20190102165511549.png"></fancybox></p><h4 id="3-在工程目录下创建manage-py作为项目启动文件"><a href="#3-在工程目录下创建manage-py作为项目启动文件" class="headerlink" title="3.在工程目录下创建manage.py作为项目启动文件"></a>3.在工程目录下创建manage.py作为项目启动文件</h4><ul><li><strong>step1</strong> 实现flask中最基本的工作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index page"</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><ul><li><strong>step2</strong> 配置mysql数据库用于存储用户数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""配置信息"""</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line">    SECRET_KEY = <span class="string">"cdtaogang**CSDN@uhduqw82981h"</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 连接mysql数据库</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">"mysql://root:mysql@127.0.0.1:3306/ihome_python"</span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"> </span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 在本地mysql中创建ihome_python数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> ihome_python <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><ul><li><strong>step4</strong> 配置redis数据库用于保存session信息以及缓存数据（因为flask框架默认将session数据存到cookie中），所以这里需要利用flask_session这个工具包帮助我们将flask存储的session数据交给我们管理，这样就可以将session数据存到redis数据库中了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""配置信息"""</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line">    SECRET_KEY = <span class="string">"cdtaogang**CSDN@uhduqw82981h"</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 连接mysql数据库</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">"mysql://root:mysql@127.0.0.1:3306/ihome_python"</span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># redis数据库配置</span></span><br><span class="line">    REDIS_HOST = <span class="string">"127.0.0.1"</span></span><br><span class="line">    REDIS_PORT = <span class="number">6379</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"> </span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建redis数据库连接对象</span></span><br><span class="line">redis_store = redis.StrictRedis(host=Config.REDIS_HOST, port=Config.REDIS_PORT)</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 配置flask_session用于我们操作session到redis数据库（说明在Config类中再次创建redis数据库连接，是因为在实际线上环境中，可能需要将session数据存到不同的服务器上）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># flask_session配置</span></span><br><span class="line">    SESSION_TYPE = <span class="string">"redis"</span></span><br><span class="line">    SESSION_REDIS = redis.StrictRedis(host=REDIS_HOST, port=REDIS_PORT)</span><br><span class="line">    SESSION_USE_SIGNER = <span class="literal">True</span>  <span class="comment"># 对cookie中session_id进行隐藏处理</span></span><br><span class="line">    PERMANENT_SESSION_LIFETIME = <span class="number">86400</span>  <span class="comment"># session数据的有效期，单位秒</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 利用flask_session， 将session数据保存到redis中</span></span><br><span class="line">Session(app)</span><br></pre></td></tr></table></figure><ul><li><strong>step6</strong> 开启csrf防护机制(导入flask_WTF中的CSRFProtect类)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为flask补充csrf防护</span></span><br><span class="line">CSRFProtect(app)</span><br></pre></td></tr></table></figure><h1 id="二丶创建工程目录-拆分manage-py"><a href="#二丶创建工程目录-拆分manage-py" class="headerlink" title="二丶创建工程目录(拆分manage.py)"></a>二丶创建工程目录(拆分manage.py)</h1><h4 id="1-拆分配置文件"><a href="#1-拆分配置文件" class="headerlink" title="1.拆分配置文件"></a>1.拆分配置文件</h4><ul><li><strong>step1</strong> 在项目根目录下创建一个config.py文件，将manage.py中的Config配置类放到该文件中</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190102202720978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 工程实现后，有两种运行环境，开发测试环境以及生成环境(线上环境)，所以flask程序在运行时，就需要配置两个配置类，一个是用于开发环境，另一个用于生成环境</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    <span class="string">"""开发环境配置信息"""</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    <span class="string">"""生成环境配置信息"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><strong>step3</strong> 将app对象设计为工厂模式</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190102190736881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step4</strong> 在config.py中创建配置映射</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建配置映射关系</span></span><br><span class="line">config_map = &#123;</span><br><span class="line">    <span class="string">"develop"</span>: DevelopmentConfig,</span><br><span class="line">    <span class="string">"product"</span>: ProductConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>step5</strong> 导入config中的config_map，通过调用create_app方法，创建app对象，将我们需要的配置环境通过传参的方式来决定是用开发环境还是生产环境，在create_app方法中就按照指明的环境进行配置即可</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190102192437214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step6</strong> 因最初创建的manage.py作为项目启动文件，所以我们在manage文件中只保留启动代码即可，需将其余代码抽离出去，保证manage文件中没有其他的代码，项目根目录下只需要保留启动文件manage以及config配置文件，即在项目根目录下创建一个ihome的python包，将create_app代码放到这个ihome包的init文件中即可，随后在ihome包下创建一个static目录用于存放静态文件，再创建一个models.py文件用于做数据库的迁移</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190102194017463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step7</strong> 在manage中创建并绑定app对象的代码，放到init中，会导致无法绑定create_app方法里面的app，所以使用SQLAlchemy对象db提供的init_app方法，在create_app方法里面对db进行初始化，这样就解决了</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/2019010219544215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step8</strong> 在models.py文件中导入数据库对象db</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ihome <span class="keyword">import</span> db</span><br></pre></td></tr></table></figure><ul><li><strong>step9</strong> 将manage文件中创建的redis数据库连接对象放到init文件中，需要思考是否放在create_app方法中，因为最初在manage文件中创建的redis数据库连接需要从config文件中拿去host以及port配置，所以我们在全局声明redis_store变量为None，然后在方法中通过config_map获取的环境配置类config_class，说白了也就是config中的开发类DevelopmentConfig，直接拿去类中我们配置好的r连接redis数据库的port和host</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/2019010220073286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step10</strong> 对于Session(app)和CSRFProtect(app)，不会用到这两个对象来进行进一步操作，只是刚开始使用这两个对象来初始化app，一个是为了我们将session数据存到redis数据库，另一个是为了开启CSRF防护机制，所以直接放到create_app类即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用flask_session， 将session数据保存到redis中</span></span><br><span class="line">Session(app)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 为flask补充csrf防护</span></span><br><span class="line">CSRFProtect(app)</span><br></pre></td></tr></table></figure><ul><li><strong>step11</strong> 创建蓝图，用于管理不同版本的视图，在ihome核心目录下创建一个api_1_0python包，代表1.0版本的蓝图，在这个蓝图下就可以创建各种各样的视图了，在api_1_0蓝图下创建一个demo.py文件，将启动文件manage中的视图函数放到里面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index page"</span></span><br></pre></td></tr></table></figure><ul><li><strong>step12</strong> 在api_1_0包下的init文件中创建蓝图</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190102204919956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step13</strong> 在flask项目应用文件init中注册蓝图 ，首先在init文件中通过绝对路径导入api_1_0包，再通过app应用对象中的register_blueprint方法，注册api_1_0包中的api蓝图名字，并定义url前缀地址为/api/v1.0表示1.0版本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册蓝图</span></span><br><span class="line">app.register_blueprint(api_1_0.api, url_prefix=<span class="string">"/api/v1.0"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step14</strong> 在创建工程时，可能会用到数据库models文件，那么就需要使用迁移插件，从flask_script中引入脚本命令管理对象，再从flask_migrate中导入迁移执行者Migrate，迁移命令解析人员Migratecommand</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190102212515288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt>/<fancybox></fancybox></fancybox></p><h1 id="三丶以开发环境进行项目测试"><a href="#三丶以开发环境进行项目测试" class="headerlink" title="三丶以开发环境进行项目测试"></a>三丶以开发环境进行项目测试</h1><ul><li><strong>step1</strong> 在Pycharm终端中，执行python manage.py runserver 默认端口，运行项目</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190102233829315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step2</strong> 打开浏览器输入<a href="http://127.0.0.1:5000/api/v1.0/index" target="_blank" rel="noopener">http://127.0.0.1:5000/api/v1.0/index</a>，测试运行项目是否成功 </li></ul><p>在浏览器中成功渲染出index视图函数返回的字符串，如下图</p><p><fancybox><img src="https://img-blog.csdnimg.cn/2019010223410575.png" alt></fancybox></p><ul><li><strong>step3</strong> 回到Pycharm终端查看程序日志，请求方式和地址以及状态码都是完全正确，代表项目设计成功</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20190102234530165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><br><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/85623829" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/85623829</a></p>]]></content>
      
      
      <categories>
          
          <category> Flask开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask网站实战开发 </tag>
            
            <tag> 手机端租房网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask项目之手机端租房网站的实战开发（一）</title>
      <link href="/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/11/03/Flask%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%A7%9F%E6%88%BF%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Hellotaogang/cdn@4.6.2/images/flask_logo.png" width="900px" height="300px" align><br>该篇文章是博主一字一码编写的，实属不易，请尊重原创，谢谢大家！</p><a id="more"></a><h1 id="一丶项目介绍"><a href="#一丶项目介绍" class="headerlink" title="一丶项目介绍"></a>一丶项目介绍</h1><ul><li><strong>产品</strong>：关于手机移动端的租房网站</li><li><strong>角色</strong>：在这个产品中用户包括房东与房客</li><li><strong>功能</strong>：房东可以在这个平台发布自己的房屋，房客可以在这个平台寻找自己想要租的房子(类似短租平台)</li><li><strong>设计模式</strong>：使用前后端分离进行项目开发(后端不再控制前端的效果展示)</li></ul><p><strong>前端效果展示</strong></p><p><img src="https://img-blog.csdnimg.cn/20190102143409760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></p><h1 id="二丶前后端分离"><a href="#二丶前后端分离" class="headerlink" title="二丶前后端分离"></a>二丶前后端分离</h1><ul><li><p><strong>前后端分离的认识</strong></p></li><li><p><strong>叙述</strong>：用户直接在浏览器中输入网址，不再是后端对应的动态逻辑了，而是一个静态页面<br>从/index 变成了 index.html文本文件，对于静态资源就从提供静态资源服务器中去拿(nginx)<br>前端页面中对于数据这块的需求必定是从后端拿去数据，后端也不需要去渲染模板，直接将前端<br>需要的数据转换成json格式字符串返回给前端即可(通过jquery以及其他前端框架去将数据渲染到页面)<br>具体做成什么效果，跟后端没有什么关系，前端什么时候需要数据，后端就给数据，这就是前后端分离。</p></li><li><p><strong>优点</strong>：无论对于手机上的浏览器还是app程序向后端拿数据时，只要在后端已经定义好了接口，这个接口都是可以直接用的，体现出后端接口的复用性。</p></li><li><p><strong>流程</strong>：用户在浏览器中输入网址的时候，需要向后端(nginx)去要网页，在这个网页中没有任何的数据，只是普通的前端呈现的样式而已，在这个网页当中的js里面，通过ajax方式向后端接口要取数据，后端接口当中给前端返回的是json字符串，前端拿到这个字符串在到ajax回调函数中，通过jquery方式把数据填充到页面上。</p></li><li><p><strong>缺点</strong>：对于搜索引擎优化SEO不友好，无法将网页的数据通过搜索引擎搜索关键字查询此网页信息，爬虫拿取页面信息，并没有任何数据，导致在搜索引擎上排名无法靠前</p></li></ul><h1 id="三丶项目需求"><a href="#三丶项目需求" class="headerlink" title="三丶项目需求"></a>三丶项目需求</h1><p>需求功能</p><ol><li><p><strong>主页</strong><br> 1.1 最多5个房屋logo图片展示，点击可跳转至房屋详情页面<br> 1.2 提供登陆/注册入口，登陆后显示用户名，点击可跳转至个人中心<br> 1.3 用户可以选择城区、入住时间、离开时间等条件进行搜索<br> 1.4 城区的区域信息需动态加载</p></li><li><p><strong>注册</strong><br> 2.1 用户账号默认为手机号<br> 2.2 图片验证码正确后才能发送短信验证码<br> 2.3 短信验证码每60秒可发送一次<br> 2.4 每个条件出错时有相应错误提示</p></li><li><p><strong>登陆</strong><br> 3.1 用手机号与密码登陆<br> 3.2 错误时有相应提示</p></li><li><p><strong>房屋列表页</strong><br> 4.1 可根据入住离开时间、区域进行筛选，并可进行排序<br> 4.2 房屋信息分页加载<br> 4.3 区域信息动态加载<br> 4.4 筛选条件更新后，页面立即刷新</p></li><li><p><strong>房屋详情页</strong><br> 5.1 需展示的详细信息参考设计图<br> 5.2 提供预定入口<br> 5.3 若是房东本人查看房屋信息时，预定入口不显示</p></li><li><p><strong>房屋预定</strong><br> 6.1 由用户确定入住时间<br> 6.2 根据用户确定的入住离开时间实时显示合计天数与总金额</p></li><li><p><strong>我的爱家</strong><br> 7.1 显示个人头像、手机号、用户名（用户名未设置时为用户手机号）<br> 7.2 提供修改个人信息的入口<br> 7.3 提供作为房客下单的查询入口<br> 7.4 提供成为房东所需实名认证的入口<br> 7.5 提供作为房东发布房屋信息的入口<br> 7.6 提供作为房东查询客户订单的入口<br> 7.7 提供退出的入口</p></li><li><p><strong>个人信息修改</strong><br> 8.1 可以修改个人头像<br> 8.2 可以修改用户名<br> 8.3 登陆手机号不能修改<br> 8.4 上传头像与用户名分开保存<br> 8.5 上传新头像后页面理解显示新头像</p></li><li><p><strong>我的订单</strong>（房客）<br> 9.1 按时间倒序显示订单信息<br> 9.2 订单完成后提供评价功能<br> 9.3 已评价的订单能看到评价信息<br> 9.4 被拒绝的订单能看到拒单原因</p></li><li><p><strong>实名认证</strong><br>10.1 实名认证只可进行一次<br>10.2 提交认证信息后再次进入只能查看信息，不能修改<br>10.3 认证信息包含姓名与身份证号</p></li><li><p><strong>我的房源</strong><br>11.1 未实名认证的用户不能发布新房源信息，需引导到实名认证页面<br>11.2 按时间倒序显示已经发布的房屋信息<br>11.3 点击房屋可以进入详情页面<br>11.4 对实名认证的用户提供发布新房屋的入口</p></li><li><p><strong>发布新房源</strong><br>12.1 需要用户填写全部房屋信息<br>12.2 房屋的文字信息与图片分开操作</p></li><li><p><strong>客户订单</strong>（房东）<br>13.1 按时间倒序显示用户下的订单<br>13.2 对于新订单提供接单与拒单的功能<br>13.3 拒单必须填写拒单原因<br>13.4 若客户进行了订单评价，需显示</p></li><li><p><strong>退出</strong><br>14.1 提供退出功能</p></li></ol><br><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/85613780" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/85613780</a></p>]]></content>
      
      
      <categories>
          
          <category> Flask开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask网站实战开发 </tag>
            
            <tag> 手机端租房网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发之微信网页授权获取用户个人信息</title>
      <link href="/2019/11/03/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E4%B9%8B%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/"/>
      <url>/2019/11/03/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E4%B9%8B%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶概述"><a href="#一丶概述" class="headerlink" title="一丶概述"></a>一丶概述</h1><ul><li><strong>微信网页授权</strong></li></ul><p>如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p><p>现在，我们要实现一个微信内网页，通过微信访问网页时，网页会展示微信用户的个人信息。因为涉及到用户的个人信息，所以需要有用户授权才可以。当用户授权后，我们的网页服务器（开发者服务器）会拿到用户的“授权书”（code）,我们用这个code向微信服务器领取访问令牌（accecc_token）和用户的身份号码（openid)，然后凭借access_token和openid向微信服务器提取用户的个人信息。</p><ol><li>第一步：用户同意授权，获取code</li><li>第二步：通过code换取网页授权access_token</li><li>第三步：拉取用户信息(需scope为 snsapi_userinfo)</li></ol><p>那么，如何拿到用户的授权code呢？</p><p>授权是由微信发起让用户进行确认，在这个过程中是微信在与用户进行交互，所以用户应该先访问微信的内容，用户确认后再由微信将用户导向到我们的网页链接地址，并携带上code参数。我们把这个过程叫做网页回调，类似于我们在程序编写时用到的回调函数，都是回调的思想。</p><ul><li><strong>关于网页授权回调域名的说明</strong></li></ul><p>1、在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头；关于网页授权回调域名的说明</p><p>2、授权回调域名配置规范为全域名，比如需要网页授权的域名为：<a href="http://www.qq.com，配置以后此域名下面的页面http://[www.qq.com/music.html](www.qq.com/music.html)" target="_blank" rel="noopener">www.qq.com，配置以后此域名下面的页面http://[www.qq.com/music.html](www.qq.com/music.html)</a> 、 <a href="http://www.qq.com/login.html" target="_blank" rel="noopener">http://www.qq.com/login.html</a> 都可以进行OAuth2.0鉴权。但<a href="http://pay.qq.com" target="_blank" rel="noopener">http://pay.qq.com</a> 、 <a href="http://music.qq.com" target="_blank" rel="noopener">http://music.qq.com</a> 、 <a href="http://qq.com" target="_blank" rel="noopener">http://qq.com</a>无法进行OAuth2.0鉴权</p><p>3、如果公众号登录授权给了第三方开发者来进行管理，则不必做任何设置，由第三方代替公众号实现网页授权即可。</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229104150347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229104333145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h2 id="第一步：用户同意授权，获取code"><a href="#第一步：用户同意授权，获取code" class="headerlink" title="第一步：用户同意授权，获取code"></a>第一步：用户同意授权，获取code</h2><p>在确保微信公众账号拥有授权作用域（scope参数）的权限的前提下（服务号获得高级接口后，默认拥有scope参数中的snsapi_base和snsapi_userinfo），引导关注者打开如下页面：</p><p><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=SCOPE&state=STATE#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></p><p><strong><font color="#FF0000">尤其注意：</font>由于授权操作安全等级较高，所以在发起授权请求时，微信会对授权链接做正则强匹配校验，如果链接的参数顺序不对，授权页面将无法正常访问</strong></p><p>参考链接(请在微信客户端中打开此链接体验):<br><strong>scope为snsapi_base</strong><br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect</a><br><strong>scope为snsapi_userinfo</strong><br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf0e81c3bee622d60&amp;redirect_uri=http%3A%2F%2Fnba.bluewebgame.com%2Foauth_response.php&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirec" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf0e81c3bee622d60&amp;redirect_uri=http%3A%2F%2Fnba.bluewebgame.com%2Foauth_response.php&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirec</a></p><p><strong><font color="#FF0000">尤其注意：</font>跳转回调redirect_uri，应当使用https链接来确保授权code的安全性。</strong></p><p>参数说明</p><table><thead><tr><th align="center">参数</th><th align="center">是否必须</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">appid</td><td align="center">是</td><td align="center">公众号的唯一标识</td></tr><tr><td align="center">redirect_uri</td><td align="center">是</td><td align="center">授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理</td></tr><tr><td align="center">response_type</td><td align="center">是</td><td align="center">返回类型，请填写code</td></tr><tr><td align="center">scope</td><td align="center">是</td><td align="center">应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td></tr><tr><td align="center">state</td><td align="center">否</td><td align="center">重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</td></tr><tr><td align="center">#wechat_redirect</td><td align="center">是</td><td align="center">无论直接打开还是做页面302重定向时候，必须带此参数</td></tr></tbody></table><p>下图为scope等于snsapi_userinfo时的授权页面：</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229105505298.jpg" alt></fancybox></p><p><strong>用户同意授权后</strong></p><p>如果用户同意授权，页面将跳转至 redirect_uri/?code=CODE&amp;state=STATE。</p><p><strong>code说明：</strong> code作为换取access_token的票据，每次用户授权带上的code将不一样，code只能使用一次，5分钟未被使用自动过期。 </p><h2 id="第二步：通过code换取网页授权access-token"><a href="#第二步：通过code换取网页授权access-token" class="headerlink" title="第二步：通过code换取网页授权access_token"></a>第二步：通过code换取网页授权access_token</h2><p>首先请注意，这里通过code换取的是一个特殊的网页授权access_token,与基础支持中的access_token（该access_token用于调用其他接口）不同。公众号可通过下述接口来获取网页授权access_token。如果网页授权的作用域为snsapi_base，则本步骤中获取到网页授权access_token的同时，也获取到了openid，snsapi_base式的网页授权流程即到此为止。</p><p>尤其注意：由于公众号的secret和获取到的access_token安全级别都非常高，必须只保存在服务器，不允许传给客户端。后续刷新access_token、通过access_token获取用户信息等步骤，也必须从服务器发起。</p><p>请求方法</p><p>获取code后，请求以下链接获取access_token：  <a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a></p><p>参数说明</p><table><thead><tr><th align="center">参数</th><th align="center">是否必须</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">appid</td><td align="center">是</td><td align="center">公众号的唯一标识</td></tr><tr><td align="center">secret</td><td align="center">是</td><td align="center">公众号的appsecret</td></tr><tr><td align="center">code</td><td align="center">是</td><td align="center">填写第一步获取的code参数</td></tr><tr><td align="center">grant_type</td><td align="center">是</td><td align="center">填写为authorization_code</td></tr></tbody></table><p>返回说明</p><p>正确时返回的JSON数据包如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"access_token"</span>:<span class="string">"ACCESS_TOKEN"</span>,</span><br><span class="line"><span class="attr">"expires_in"</span>:<span class="number">7200</span>,</span><br><span class="line"><span class="attr">"refresh_token"</span>:<span class="string">"REFRESH_TOKEN"</span>,</span><br><span class="line"><span class="attr">"openid"</span>:<span class="string">"OPENID"</span>,</span><br><span class="line"><span class="attr">"scope"</span>:<span class="string">"SCOPE"</span> &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">access_token</td><td align="center">网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</td></tr><tr><td align="center">expires_in</td><td align="center">access_token接口调用凭证超时时间，单位（秒）</td></tr><tr><td align="center">refresh_token</td><td align="center">用户刷新access_token</td></tr><tr><td align="center">openid</td><td align="center">用户唯一标识，请注意，在未关注公众号时，用户访问公众号的网页，也会产生一个用户和公众号唯一的OpenID</td></tr><tr><td align="center">scope</td><td align="center">用户授权的作用域，使用逗号（,）分隔</td></tr></tbody></table><p>错误时微信会返回JSON数据包如下（示例为Code无效错误）:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"errcode"</span>:<span class="number">40029</span>,<span class="attr">"errmsg"</span>:<span class="string">"invalid code"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="第三步：拉取用户信息-需scope为-snsapi-userinfo"><a href="#第三步：拉取用户信息-需scope为-snsapi-userinfo" class="headerlink" title="第三步：拉取用户信息(需scope为 snsapi_userinfo)"></a>第三步：拉取用户信息(需scope为 snsapi_userinfo)</h2><p>如果网页授权作用域为snsapi_userinfo，则此时开发者可以通过access_token和openid拉取用户信息了。</p><p>请求方法</p><p>http：GET（请使用https协议） <a href="https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</a></p><p>参数说明</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">access_token</td><td align="center">网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</td></tr><tr><td align="center">openid</td><td align="center">用户的唯一标识</td></tr><tr><td align="center">lang</td><td align="center">返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语</td></tr></tbody></table><p>返回说明</p><p>正确时返回的JSON数据包如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;    <span class="attr">"openid"</span>:<span class="string">" OPENID"</span>,</span><br><span class="line"><span class="attr">" nickname"</span>: NICKNAME,</span><br><span class="line"><span class="attr">"sex"</span>:<span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"province"</span>:<span class="string">"PROVINCE"</span></span><br><span class="line"><span class="string">"city"</span>:<span class="string">"CITY"</span>,</span><br><span class="line"><span class="attr">"country"</span>:<span class="string">"COUNTRY"</span>,</span><br><span class="line"><span class="attr">"headimgurl"</span>:    <span class="string">"http://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/46"</span>,</span><br><span class="line"><span class="attr">"privilege"</span>:[ <span class="string">"PRIVILEGE1"</span> <span class="string">"PRIVILEGE2"</span>     ],</span><br><span class="line"><span class="attr">"unionid"</span>: <span class="string">"o6_bmasdasdsad6_2sgVt7hMZOPfL"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">openid</td><td align="center">用户的唯一标识</td></tr><tr><td align="center">nickname</td><td align="center">用户昵称</td></tr><tr><td align="center">sex</td><td align="center">用户的性别，值为1时是男性，值为2时是女性，值为0时是未知</td></tr><tr><td align="center">province</td><td align="center">用户个人资料填写的省份</td></tr><tr><td align="center">city</td><td align="center">普通用户个人资料填写的城市</td></tr><tr><td align="center">country</td><td align="center">国家，如中国为CN</td></tr><tr><td align="center">headimgurl</td><td align="center">用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。</td></tr><tr><td align="center">privilege</td><td align="center">用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）</td></tr><tr><td align="center">unionid</td><td align="center">只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。</td></tr></tbody></table><p>错误时微信会返回JSON数据包如下（示例为openid无效）:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"errcode"</span>:<span class="number">40003</span>,<span class="attr">"errmsg"</span>:<span class="string">" invalid openid "</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="二丶代码实现"><a href="#二丶代码实现" class="headerlink" title="二丶代码实现"></a>二丶代码实现</h1><ul><li>思路分析</li><li>首选在我们的flask程序中需要定义一个视图函数路由规则为/wechat8007/index，定义微信服务器重定向网址redirect_uri为服务器域名+/wechat8007/index（例如<a href="http://www.xxxx.com/wechat8007/index" target="_blank" rel="noopener">http://www.xxxx.com/wechat8007/index</a>），通过访问微信提供的引导页面，让用户同意授权，然后重定向到我们定义的网址，此时微信服务器就会给我们的服务一个code，我们的服务器再通过code向微信服务器换取网页授权access_token(存取令牌)，如果网页授权作用域为snsapi_userinfo，则此时可以通过access_token和openid拉取用户信息了。</li></ul><ul><li><strong>step1 同意授权，这一块不需要代码实现，只需要提供授权链接即可</strong></li><li><strong>step2 定义视图函数，当用户同意授权，页面将跳转至 redirect_uri/?code=CODE&amp;state=STATE ，在flask程序中定义一个是视图函数接口index，让用户同意授权后，去访问的视图</strong></li></ul><ul><li>上一篇博客定义的wechat视图，是由微信服务器访问，现在定义的index视图为用户访问的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route("/wechat8007/index")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""让用户通过微信访问的网页页面视图"""</span></span><br></pre></td></tr></table></figure><ul><li><strong>step3  刚开始还没拉去用户资料时，可直接返回一个模板</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render_template(<span class="string">"index.html"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>step4 从微信服务器中获取用户的资料数据，将用户的资料数据填充到index.html模板中</strong></li><li>1.获取code参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code = request.args.get(<span class="string">"code"</span>)</span><br></pre></td></tr></table></figure><ul><li>2.当code不存在时，返回字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> code:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">u"缺失code参数"</span></span><br></pre></td></tr></table></figure><ul><li>3.向微信服务器发送http请求，获取access_token，在获取之前要在代码定义全局变量WECHAT_APPID以及WECHAT_APPSECRET的值，用来填充<a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a> 微信提供获取access_token链接地址中的APPID以及SECRET和CODE的值，再通过python中的urllib2库向这个url发送请求，read方法读取文本内容获取json格式的字符串，然后使用json当中的loads方法将json格式的字符串转换为字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"https://api.weixin.qq.com/sns/oauth2/access_token?appid=%s&amp;secret=%s&amp;code=%s&amp;grant_type=authorization_code"</span> %(WECHAT_APPID,WECHAT_APPSECRET,code)</span><br><span class="line"> </span><br><span class="line">response = urllib2.urlopen(url)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取响应体数据,微信返回的json数据</span></span><br><span class="line">json_str = response.read()</span><br><span class="line">resp_dict = json.loads(json_str)</span><br></pre></td></tr></table></figure><ul><li>4.提取access_token，首先对获取到的响应体数据进行判断，如果不存在，直接返回提示字符串，存在则通过get方式拿去字典中的access_token键的值以及用户编号openid的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">"errcode"</span> <span class="keyword">in</span> resp_dict:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">u"获取access_token失败"</span></span><br><span class="line"> </span><br><span class="line">access_token = resp_dict.get(<span class="string">"access_token"</span>)</span><br><span class="line">open_id = resp_dict.get(<span class="string">"openid"</span>)  <span class="comment"># 用户的编号</span></span><br></pre></td></tr></table></figure><ul><li><strong>step5 向微信服务器发送http请求，获取用户的资料数据</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"https://api.weixin.qq.com/sns/userinfo?access_token=%s&amp;openid=%s&amp;lang=zh_CN"</span> %(access_token,open_id)</span><br><span class="line"> </span><br><span class="line">response = urllib2.urlopen(url)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 读取微信传回的json的响应体数据</span></span><br><span class="line">user_json_str = response.read()</span><br><span class="line">user_dict_data = json.loads(user_json_str)</span><br></pre></td></tr></table></figure><ul><li><strong>step6 判断微信返回的响应体数据中是否有errorcode字段，如果存在则返回失败信息，不存在说明微信返回的json数据为正确数据，则将该数据传给index.html模板，当用户访问<a href="http://xxx/wechat8007/index" target="_blank" rel="noopener">http://xxx/wechat8007/index</a>地址时，会渲染出我们定义的index.html模板</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">"errcode"</span> <span class="keyword">in</span> user_dict_data:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">u"获取用户信息失败"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 将用户的资料数据填充到页面中</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>, user=user_dict_data)</span><br></pre></td></tr></table></figure><ul><li><strong>step7 当前目录下创建templates模板目录，在该目录中创建index.html文件 ，代码如下</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&#123;&#123;user["nickname"]&#125;&#125;的个人主页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img alt=<span class="string">"头像"</span> src=<span class="string">"&#123;&#123;user['headimgurl']&#125;&#125;"</span> width=<span class="string">"60"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;openid&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;user["openid"]&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;昵称&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;user["nickname"]&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &#123;% <span class="keyword">if</span> <span class="number">1</span> == user[<span class="string">"sex"</span>] %&#125;</span><br><span class="line">                    男</span><br><span class="line">                &#123;% <span class="keyword">elif</span> <span class="number">2</span> == user[<span class="string">"sex"</span>] %&#125;</span><br><span class="line">                    女</span><br><span class="line">                &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">                    未知</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;省份&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;user["province"]&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;城市&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;user["city"]&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;国家&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;user["country"]&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="三丶部署测试"><a href="#三丶部署测试" class="headerlink" title="三丶部署测试"></a>三丶部署测试</h1><ul><li><strong>step1 将代码推送到服务器上</strong></li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229140003514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>成功推送到服务器上</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229140215248.png" alt></fancybox></p><ul><li><strong>step2 在服务器上进入虚拟环境，运行此程序</strong></li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/201812291420440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step3 拼接微信提供网址</strong> <a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=SCOPE&state=STATE#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></li><li>注：正式公众号redirect_uri地址必须为服务器的域名地址，不能是IP地址</li><li>在拼接redirect_uri时，服务器的域名为<a href="http://www.xxx.com/wechat8007/index" target="_blank" rel="noopener">http://www.xxx.com/wechat8007/index</a>，微信提供的授权地址http://中不可能包含一个<a href="redirect_uri为http://www.xxx.com/wechat8007/index">redirect_uri为http://www.xxx.com/wechat8007/index</a>用户同意授权后跳转的地址，所以需要对重定向地址<a href="http://www.xxx.com/wechat8007/index" target="_blank" rel="noopener">http://www.xxx.com/wechat8007/index</a> 进行转义</li><li>使用python urllib库中的quote方法进行转义</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> urllib</span><br><span class="line"> </span><br><span class="line">In [<span class="number">2</span>]: urllib.quote(<span class="string">"http://www.xxx.com/wechat8007/index"</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'http%3A//www.xxx.com/wechat8007/index'</span></span><br></pre></td></tr></table></figure><p>拼接好的用户访问的url地址为</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229150305130.png" alt></fancybox></p><ul><li><strong>step4 可以将该网址生成二维码，使用微信扫一扫，也可以在接口公众号直接发送此链接地址</strong></li><li>使用谷歌浏览器的二维码插件，将网址生成对应的二维码(这里以百度首页网址为例)</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229150724658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>直接在浏览器中输入此地址会提示请在微信客户端打开链接</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229151458376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><strong>step5 测试，在手机微信上打开此链接，出现授权登录提示，点击允许即可获取用户个人信息</strong></li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229152114726.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><p>点击允许后，进入如下界面</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229153415707.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><p>点击继续访问，则出现博主个人的微信信息了，如下图</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229153709772.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><p>此时查看服务器上程序运行日志 </p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181229154311666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h1 id="四丶完整代码"><a href="#四丶完整代码" class="headerlink" title="四丶完整代码"></a>四丶完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">import</span> json, urllib2</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">WECHAT_APPID = <span class="string">"yourappid"</span></span><br><span class="line">WECHAT_APPSECRET = <span class="string">"yoursecret"</span></span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route("/wechat8007/index")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"> </span><br><span class="line">    code = request.args.get(<span class="string">"code"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> code:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">u"缺失code参数"</span></span><br><span class="line"> </span><br><span class="line">    url = <span class="string">"https://api.weixin.qq.com/sns/oauth2/access_token?appid=%s&amp;secret=%s&amp;code=%s&amp;grant_type=authorization_code"</span> % (WECHAT_APPID, WECHAT_APPSECRET, code)</span><br><span class="line"> </span><br><span class="line">    response = urllib2.urlopen(url)</span><br><span class="line"> </span><br><span class="line">    json_str = response.read()</span><br><span class="line">    resp_dict = json.loads(json_str)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="string">"errcode"</span> <span class="keyword">in</span> resp_dict:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">u"获取access_token失败"</span></span><br><span class="line"> </span><br><span class="line">    access_token = resp_dict.get(<span class="string">"access_token"</span>)</span><br><span class="line">    open_id = resp_dict.get(<span class="string">"openid"</span>)</span><br><span class="line"> </span><br><span class="line">    url = <span class="string">"https://api.weixin.qq.com/sns/userinfo?access_token=%s&amp;openid=%s&amp;lang=zh_CN"</span> % (access_token, open_id)</span><br><span class="line"> </span><br><span class="line">    response = urllib2.urlopen(url)</span><br><span class="line">    user_json_str = response.read()</span><br><span class="line">    user_dict_data = json.loads(user_json_str)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="string">"errcode"</span> <span class="keyword">in</span> user_dict_data:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">u"获取用户信息失败"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>, user=user_dict_data)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(port=<span class="number">8007</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>总结：微信公众号接口开发，根据官方提供的开发文档，进行开发，逻辑实现都很简单，多想多思考多练习，你会越来越棒的！</strong></p><br><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/85334634" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/85334634</a></p>]]></content>
      
      
      <categories>
          
          <category> WeChat开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> 微信公众号 </tag>
            
            <tag> 微信开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发之接收与发送消息</title>
      <link href="/2019/11/03/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E4%B9%8B%E6%8E%A5%E6%94%B6%E4%B8%8E%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/"/>
      <url>/2019/11/03/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E4%B9%8B%E6%8E%A5%E6%94%B6%E4%B8%8E%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶概论"><a href="#一丶概论" class="headerlink" title="一丶概论"></a>一丶概论</h1><ul><li><strong>公众号接收与发送消息</strong></li></ul><p>验证URL有效性成功后即接入生效，成为开发者。如果公众号类型为服务号（订阅号只能使用普通消息接口），可以在公众平台网站中申请认证，认证成功的服务号将获得众多接口权限，以满足开发者需求。</p><p>此后用户每次向公众号发送消息、或者产生自定义菜单点击事件时，开发者填写的服务器配置URL将得到微信服务器推送过来的消息和事件，然后开发者可以依据自身业务逻辑进行响应，例如回复消息等。</p><p><strong>用户向公众号发送消息时，公众号方收到的消息发送者是一个OpenID，是使用用户微信号加密后的结果，每个用户对每个公众号有一个唯一的OpenID。</strong></p><h2 id="1-接收普通消息"><a href="#1-接收普通消息" class="headerlink" title="1.接收普通消息"></a>1.接收普通消息</h2><p><strong>当普通微信用户向公众账号发消息时，微信服务器将POST消息的XML数据包到开发者填写的URL上。</strong></p><p>微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次。假如服务器无法保证在五秒内处理并回复，可以直接回复空串，微信服务器不会对此作任何处理，并且不会发起重试。</p><p>各消息类型的推送使用XML数据包结构，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[gh_866835093fea]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[ogdotwSc_MmEEsJs9-ABZ1QL_4r4]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1478317060<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[text]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Content</span>&gt;</span>&lt;![CDATA[你好]]&gt;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>6349323426230210995<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>&lt;![CDATA 与 ]]&gt; 括起来的数据不会被xml解析器解析 </p><h2 id="2-普通消息类别"><a href="#2-普通消息类别" class="headerlink" title="2.普通消息类别"></a>2.普通消息类别</h2><ol><li>文本消息</li><li>图片消息</li><li>语音消息</li><li>视频消息</li><li>小视频消息</li><li>地理位置消息</li><li>链接消息</li></ol><p><strong>文本消息</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1348831860<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[text]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Content</span>&gt;</span>&lt;![CDATA[this is a test]]&gt;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181228192104582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></p><h2 id="3-回复的消息类型"><a href="#3-回复的消息类型" class="headerlink" title="3. 回复的消息类型"></a>3. 回复的消息类型</h2><ol><li>文本消息</li><li>图片消息</li><li>语音消息</li><li>视频消息</li><li>音乐消息</li><li>图文消息</li></ol><p><strong>回复文本消息</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[text]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Content</span>&gt;</span>&lt;![CDATA[你好]]&gt;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong>开发文档可以到 <a href="https://mp.weixin.qq.com/wiki/home/index.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki/home/index.html</a>  进行阅读查看</p><h1 id="二丶代码实现"><a href="#二丶代码实现" class="headerlink" title="二丶代码实现"></a>二丶代码实现</h1><p>需求：我们现在来实现一个针对文本消息的收发程序。实现的业务逻辑，关注者发什么内容，我们就传回给什么内容。</p><p>说明：微信服务器推送消息还是往/wechat/8007，所以在之前代码上进行修改即可</p><h2 id="1-开发步骤"><a href="#1-开发步骤" class="headerlink" title="1.开发步骤"></a>1.开发步骤</h2><ul><li>step1 如何区分微信服务器发过来的是第一次的验证操作还是消息操作</li><li>验证操作为GET请求，消息操作为POST请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route("/wechat8007", methods=["GET", "POST"])</span></span><br></pre></td></tr></table></figure><ul><li>step2 参数变更，echostr参数只是在第一次验证的时候需要，无论是POST请求还是GET请求这三种参数都必要要，因为需要验证是不是微信服务器发送过来的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">signature = request.args.get(<span class="string">"signature"</span>)</span><br><span class="line">timestamp = request.args.get(<span class="string">"timestamp"</span>)</span><br><span class="line">nonce = request.args.get(<span class="string">"nonce"</span>)</span><br></pre></td></tr></table></figure><ul><li>step3 对微信服务器发送的请求进行验证判断，如果是GET请求，那么代表是第一次的验证操作，那么就需要获取echostr字段的内容，如果内容为空则抛出404，存在则返回echostr</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">    <span class="comment"># 表示是第一次接入微信服务器的验证</span></span><br><span class="line">    echostr = request.args.get(<span class="string">"echostr"</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> echostr:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> echostr</span><br></pre></td></tr></table></figure><ul><li>step4 如果为POST请求，那么代表为微信服务器转发消息过来，获取请求中的data xml数据 ，数据为空抛出400</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">    <span class="comment"># 表示微信服务器转发消息过来</span></span><br><span class="line">    xml_str = request.data</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> xml_str:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br></pre></td></tr></table></figure><ul><li>step5 将对获取的数据进行解析，通过xmltodict模块中的parse方法将字符串类型的xml数据，转换成字典类型的xml格式数据，因为xml数据最外层有一个<xml></xml>标签，通过get方式获取标签里的内容，再通过get获取内容中的MsgType消息类型字段的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对xml字符串进行解析</span></span><br><span class="line">xml_dict = xmltodict.parse(xml_str)</span><br><span class="line">xml_dict = xml_dict.get(<span class="string">"xml"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提取消息类型</span></span><br><span class="line">msg_type = xml_dict.get(<span class="string">"MsgType"</span>)</span><br></pre></td></tr></table></figure><ul><li>step6 对消息类型进行判断，如果为text文本消息，则返回文本消息，不是文本消息还是返回文本消息，这里可以拓展为(image，voice，video等等可以查看开发文档)，这里为了演示，就简单写写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> msg_type == <span class="string">"text"</span>:</span><br><span class="line">    <span class="comment"># 表示发送的是文本消息</span></span><br><span class="line">    <span class="comment"># 构造返回值，经由微信服务器回复给用户的消息内容</span></span><br><span class="line">    resp_dict = &#123;</span><br><span class="line">        <span class="string">"xml"</span>: &#123;</span><br><span class="line">            <span class="string">"ToUserName"</span>: xml_dict.get(<span class="string">"FromUserName"</span>),</span><br><span class="line">            <span class="string">"FromUserName"</span>: xml_dict.get(<span class="string">"ToUserName"</span>),</span><br><span class="line">            <span class="string">"CreateTime"</span>: int(time.time()),</span><br><span class="line">            <span class="string">"MsgType"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="string">"Content"</span>: <span class="string">"taogang say:"</span> + xml_dict.get(<span class="string">"Content"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    resp_dict = &#123;</span><br><span class="line">        <span class="string">"xml"</span>: &#123;</span><br><span class="line">            <span class="string">"ToUserName"</span>: xml_dict.get(<span class="string">"FromUserName"</span>),</span><br><span class="line">            <span class="string">"FromUserName"</span>: xml_dict.get(<span class="string">"ToUserName"</span>),</span><br><span class="line">            <span class="string">"CreateTime"</span>: int(time.time()),</span><br><span class="line">            <span class="string">"MsgType"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="string">"Content"</span>: <span class="string">"Dear I Love you so much"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>step7 最后将我们构造的响应返回值通过unparse方法转换成xml格式的字符串，返回给微信服务器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字典转换为xml字符串</span></span><br><span class="line">resp_xml_str = xmltodict.unparse(resp_dict)</span><br><span class="line"><span class="comment"># 返回消息数据给微信服务器</span></span><br><span class="line"><span class="keyword">return</span> resp_xml_str</span><br></pre></td></tr></table></figure><h2 id="2-部署测试"><a href="#2-部署测试" class="headerlink" title="2.部署测试"></a>2.部署测试</h2><ul><li>step1 将代码推送到服务器上</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228212836627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li>step2 在服务器上进入虚拟环境，运行此程序</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228213121693.png" alt></fancybox></p><ul><li>step3 进入微信公众平台，用手机扫描测试号二维码，进行关注测试</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228213429788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox><br>扫码后进行关注</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228213746467.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><p>关注后进入此公众号，公众号则发送我们在<strong>开发步骤step 6</strong>，Dear I Love you so much 消息内容</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228214352664.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><p>回到服务器程序运行日志上，显示为POST请求，说明程序逻辑完全没问题</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228214604559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>公众号测试平台用户列表将我的微信添加上去了</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228214900349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li>step4 测试，在关注的此公众中，进行消息(文本，表情，语言，图片，视频）发送，当消息类型为文本时，即返回此消息内容，如果不是都是返回文本类型，内容为Dear I Love you so much</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228215333589.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228215638812.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><p>此时的服务器代码运行日志</p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228220035159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h2 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3.完整代码"></a>3.完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort, render_template</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> xmltodict, time</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line"><span class="comment"># 微信的token令牌</span></span><br><span class="line">WECHAT_TOKEN = <span class="string">"cdtaogang"</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route("/wechat8007", methods=["GET", "POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wechat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""对接微信公众号服务器"""</span></span><br><span class="line">    <span class="comment"># 接收微信服务器发送的参数</span></span><br><span class="line">    signature = request.args.get(<span class="string">"signature"</span>)</span><br><span class="line">    timestamp = request.args.get(<span class="string">"timestamp"</span>)</span><br><span class="line">    nonce = request.args.get(<span class="string">"nonce"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([signature, timestamp, nonce]):</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 按照微信的流程进行计算签名</span></span><br><span class="line">    li = [WECHAT_TOKEN, timestamp, nonce]</span><br><span class="line">    <span class="comment"># 排序</span></span><br><span class="line">    li.sort()</span><br><span class="line">    <span class="comment"># 拼接字符串</span></span><br><span class="line">    tmp_str = <span class="string">''</span>.join(li)</span><br><span class="line">    <span class="comment"># 进行sha1加密, 得到正确的签名值</span></span><br><span class="line">    sign = hashlib.sha1(tmp_str).hexdigest()</span><br><span class="line">    <span class="comment"># 将自己计算的签名值与请求的签名参数进行对比，如果相同，则证明请求来自微信服务器</span></span><br><span class="line">    <span class="keyword">if</span> sign != signature:</span><br><span class="line">        <span class="comment"># 表示请求不是微信发的</span></span><br><span class="line">        abort(<span class="number">403</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 表示是微信发送的请求</span></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">            <span class="comment"># 表示是第一次接入微信服务器的验证</span></span><br><span class="line">            echostr = request.args.get(<span class="string">"echostr"</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> echostr:</span><br><span class="line">                abort(<span class="number">404</span>)</span><br><span class="line">            <span class="keyword">return</span> echostr</span><br><span class="line">        <span class="keyword">elif</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">            <span class="comment"># 表示微信服务器转发消息过来</span></span><br><span class="line">            xml_str = request.data</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> xml_str:</span><br><span class="line">                abort(<span class="number">400</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 对xml字符串进行解析</span></span><br><span class="line">            xml_dict = xmltodict.parse(xml_str)</span><br><span class="line">            xml_dict = xml_dict.get(<span class="string">"xml"</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 提取消息类型</span></span><br><span class="line">            msg_type = xml_dict.get(<span class="string">"MsgType"</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> msg_type == <span class="string">"text"</span>:</span><br><span class="line">                <span class="comment"># 表示发送的是文本消息</span></span><br><span class="line">                <span class="comment"># 构造返回值，经由微信服务器回复给用户的消息内容</span></span><br><span class="line">                resp_dict = &#123;</span><br><span class="line">                    <span class="string">"xml"</span>: &#123;</span><br><span class="line">                        <span class="string">"ToUserName"</span>: xml_dict.get(<span class="string">"FromUserName"</span>),</span><br><span class="line">                        <span class="string">"FromUserName"</span>: xml_dict.get(<span class="string">"ToUserName"</span>),</span><br><span class="line">                        <span class="string">"CreateTime"</span>: int(time.time()),</span><br><span class="line">                        <span class="string">"MsgType"</span>: <span class="string">"text"</span>,</span><br><span class="line">                        <span class="string">"Content"</span>: <span class="string">"taogang say:"</span> + xml_dict.get(<span class="string">"Content"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                resp_dict = &#123;</span><br><span class="line">                    <span class="string">"xml"</span>: &#123;</span><br><span class="line">                        <span class="string">"ToUserName"</span>: xml_dict.get(<span class="string">"FromUserName"</span>),</span><br><span class="line">                        <span class="string">"FromUserName"</span>: xml_dict.get(<span class="string">"ToUserName"</span>),</span><br><span class="line">                        <span class="string">"CreateTime"</span>: int(time.time()),</span><br><span class="line">                        <span class="string">"MsgType"</span>: <span class="string">"text"</span>,</span><br><span class="line">                        <span class="string">"Content"</span>: <span class="string">"Dear I Love you so much"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment"># 将字典转换为xml字符串</span></span><br><span class="line">            resp_xml_str = xmltodict.unparse(resp_dict)</span><br><span class="line">            <span class="comment"># 返回消息数据给微信服务器</span></span><br><span class="line">            <span class="keyword">return</span> resp_xml_str</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(port=<span class="number">8007</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/85330265" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/85330265</a></p>]]></content>
      
      
      <categories>
          
          <category> WeChat开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> 微信公众号 </tag>
            
            <tag> 微信开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号之接入微信公众号服务器开发（二）</title>
      <link href="/2019/10/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%B9%8B%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/10/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%B9%8B%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶叙述"><a href="#一丶叙述" class="headerlink" title="一丶叙述"></a>一丶叙述</h1><h2 id="开发说明"><a href="#开发说明" class="headerlink" title="开发说明"></a>开发说明</h2><ol><li>Python代码实现（以Flask框架为例）</li><li>将使用公众号消息会话</li><li>客户端—-＞微信服务器—-＞nginx服务器—-＞开发者服务器</li><li>在微信服务器与开发者服务器之间搭建了nginx服务器默认为80端口(也是微信支持的端口)，跟开发者服务器属于同一个主机</li><li>在nginx服务器上配置了多个端口，方便多人进行测试，转发规则：location/wechat8007</li><li>在微信公众号测试平台接口配置url为host/wechat8007时，当微信服务器发送消息给host/wechat8007时，host为nginx服务器时，就会按照/wechat8007转发规则匹配，一旦匹配成功后，由nginx服务器转发给开发者服务器上127.0.0.1:8007进程的用户，这样可以实现多个账号共享一个80端口，并可以收到微信服务器对应用户的消息</li><li>注：在写的flask程序中视图网址也必须是/wechat8007，因为nginx在向后台转发的时候，它只是按照/wechat8007规则知道转发给谁，它会把微信用户的请求原封不动的往后去发，因为微信服务器在向我们发送请求路径就是/wechat:8007,意味着nginx再转发给我们的时候，在我们写的flask程序收到的请求里面，你会发现对应的请求路径也是/wechat8007，所以我们flask程序中的route路径也必须是/wechat8007</li><li>如果是在公司做开发的话，不涉及到多个账户使用一个80端口，所以直接把程序在开发者服务器上以80端口运行，然后在微信公众测试平台配置url为配置程序地址即可</li><li>博主之所以这样做，那是因为我还没有购买服务器（●︿●）</li></ol><h2 id="接入微信公众平台"><a href="#接入微信公众平台" class="headerlink" title="接入微信公众平台"></a>接入微信公众平台</h2><p>接入微信公众平台开发，开发者需要按照如下步骤完成：</p><ol><li>填写服务器配置</li><li>验证服务器地址的有效性</li><li>依据接口文档实现业务逻辑</li></ol><h2 id="填写服务器配置"><a href="#填写服务器配置" class="headerlink" title="填写服务器配置"></a>填写服务器配置</h2><p>登录微信公众平台官网后，在公众平台后台管理页面 - 开发者中心页，点击“修改配置”按钮，填写服务器地址（URL）、Token和EncodingAESKey，其中URL是开发者用来接收微信消息和事件的接口URL。Token可由开发者可以任意填写，用作生成签名（该Token会和接口URL中包含的Token进行比对，从而验证安全性）。EncodingAESKey由开发者手动填写或随机生成，将用作消息体加解密密钥。</p><p>同时，开发者可选择消息加解密方式：明文模式、兼容模式和安全模式。模式的选择与服务器配置在提交后都会立即生效，请开发者谨慎填写及选择。加解密方式的默认状态为明文模式，选择兼容模式和安全模式需要提前配置好相关加解密代码，详情请参考消息体签名及加解密部分的文档。</p><h3 id="1-进入微信公众平台后，找到开发栏，进入基本配置"><a href="#1-进入微信公众平台后，找到开发栏，进入基本配置" class="headerlink" title="1.进入微信公众平台后，找到开发栏，进入基本配置"></a>1.进入微信公众平台后，找到开发栏，进入基本配置</h3><p><img src="https://img-blog.csdnimg.cn/20181228142954745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt><br><fancybox><img src="https://img-blog.csdnimg.cn/20181228143920280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h3 id="2-利用测试平台"><a href="#2-利用测试平台" class="headerlink" title="2.利用测试平台"></a>2.利用测试平台</h3><p>测试平台登录地址：<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a><br><fancybox><img src="https://img-blog.csdnimg.cn/2018122817020287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox><br>在手机微信上进行扫码登录即可<br><fancybox><img src="https://img-blog.csdnimg.cn/20181228171021423.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><h1 id="二丶验证服务器地址的有效性"><a href="#二丶验证服务器地址的有效性" class="headerlink" title="二丶验证服务器地址的有效性"></a>二丶验证服务器地址的有效性</h1><p>开发者提交信息后，微信服务器将发送GET请求到填写的服务器地址URL上，GET请求携带四个参数：<br><fancybox><img src="https://img-blog.csdnimg.cn/20181228174733106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><p>开发者通过检验signature对请求进行校验。若确认此次GET请求来自微信服务器，请原样返回echostr参数内容，则接入生效，成为开发者成功，否则接入失败。</p><p>校验流程：</p><ol><li>将token、timestamp、nonce三个参数进行字典序排序</li><li>将三个参数字符串拼接成一个字符串进行sha1加密</li><li>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</li></ol><h3 id="1-根据上面微信公众平台提供的开发文档进行代码编写"><a href="#1-根据上面微信公众平台提供的开发文档进行代码编写" class="headerlink" title="1.根据上面微信公众平台提供的开发文档进行代码编写"></a>1.根据上面微信公众平台提供的开发文档进行代码编写</h3><p>代码实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line"><span class="comment"># 微信的token令牌</span></span><br><span class="line">WECHAT_TOKEN = <span class="string">"cdtaogang"</span></span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route("/wechat8007")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wechat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""对接微信公众号服务器"""</span></span><br><span class="line">    <span class="comment"># 接收微信服务器发送的参数</span></span><br><span class="line">    signature = request.args.get(<span class="string">"signature"</span>)</span><br><span class="line">    timestamp = request.args.get(<span class="string">"timestamp"</span>)</span><br><span class="line">    nonce = request.args.get(<span class="string">"nonce"</span>)</span><br><span class="line">    echostr = request.args.get(<span class="string">"echostr"</span>)</span><br><span class="line">    <span class="comment"># 校验参数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([signature, timestamp, nonce, echostr]):</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 按照微信的流程进行计算签名</span></span><br><span class="line">    li = [WECHAT_TOKEN, timestamp, nonce]</span><br><span class="line">    <span class="comment"># 排序</span></span><br><span class="line">    li.sort()</span><br><span class="line">    <span class="comment"># 拼接字符串</span></span><br><span class="line">    tmp_str = <span class="string">''</span>.join(li)</span><br><span class="line">    <span class="comment"># 进行sha1加密, 得到正确的签名值</span></span><br><span class="line">    sign = hashlib.sha1(tmp_str).hexdigest()</span><br><span class="line">    <span class="comment"># 将自己计算的签名值与请求的签名参数进行对比，如果相同，则证明请求来自微信服务器</span></span><br><span class="line">    <span class="keyword">if</span> sign != signature:</span><br><span class="line">        <span class="comment"># 表示请求不是微信发的</span></span><br><span class="line">        abort(<span class="number">403</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> echostr</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(port=<span class="number">8007</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="2-测试连接开发者服务器"><a href="#2-测试连接开发者服务器" class="headerlink" title="2.测试连接开发者服务器"></a>2.测试连接开发者服务器</h3><ul><li><b>step1 使用ssh命令测试连接服务器</b></li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228182101658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><b>step2 使用scp命令将程序文件推送到服务器</b></li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228182759767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><b>step3 在开发者服务器上运行wechat程序</b></li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228183116979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li><b>step4 回到微信公众测试平台配置接口</b></li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228183513192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox><br><b>注意：当没有在服务器运行wechat程序时，进行提交会显示失败</b></p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228183757670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox><br><b>此时，回头看服务器程序运行日志，微信给我发了一个以get方式请求过来的数据</b></p><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228184238535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox><br><b>大功告成！说明该服务器具有有效性….</b><br><br></p><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/85321424" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/85321424</a></p>]]></content>
      
      
      <categories>
          
          <category> WeChat开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> 微信公众号 </tag>
            
            <tag> 微信开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号之接入微信公众号服务器开发（一）</title>
      <link href="/2019/10/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%B9%8B%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/10/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%B9%8B%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶概述"><a href="#一丶概述" class="headerlink" title="一丶概述"></a>一丶概述</h1><h2 id="公众号与公众平台"><a href="#公众号与公众平台" class="headerlink" title="公众号与公众平台"></a>公众号与公众平台</h2><h3 id="1-微信账号类型"><a href="#1-微信账号类型" class="headerlink" title="1.微信账号类型"></a>1.微信账号类型</h3><ul><li>个人号</li><li>公众号<br>&ensp;– 订阅号<br>&ensp;– 服务号</li><li>企业号</li></ul><h3 id="2-公众号"><a href="#2-公众号" class="headerlink" title="2.公众号"></a>2.公众号</h3><p><b>微信公众号</b>主要面向名人、政府、媒体、企业等机构推出的合作推广业务。在这里可以通过微信渠道将品牌推广给上亿的微信用户，减少宣传成本，提高品牌知名度，打造更具影响力的品牌形象。</p><h3 id="3-公众平台"><a href="#3-公众平台" class="headerlink" title="3.公众平台"></a>3.公众平台</h3><p>微信公众平台是运营者通过公众号为微信用户提供资讯和服务的平台，而公众平台开发接口则是提供服务的基础，开发者在公众平台网站中创建公众号、获取接口权限后，可以通过阅读公众平台开发接口文档来帮助开发。</p><p>微信公众平台可以用来注册、管理公众号和企业号。</p><p><b>登录网址：</b><a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com/</a></p><p>进入上面网址，可进行登录及注册<br><fancybox><br><img src="https://img-blog.csdnimg.cn/20181228120221641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt><br></fancybox><br><b>注册流程：</b></p><ul><li>step1 基本信息</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228124707431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li>step2 选择类型</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228125535973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox><br><fancybox><img src="https://img-blog.csdnimg.cn/2018122812593597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox><br><a href="https://img-blog.csdnimg.cn/20181228130654654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener"></a></p><ul><li>step3 信息登记</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228130425982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li>step4 公众号信息</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228130920989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li>step5 完成注册后，进行登录，首先需使用手机进行扫码</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228132726779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><ul><li>在手机端显示此界面，确认无误后，确定即可</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228132912503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" width="360" height="650"></fancybox></p><ul><li>通过身份验证后，即可在网页端对创建的公众号进行简单配置，如下图</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228133603911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt><fancybox></fancybox></fancybox></p><ul><li>一些简单的功能添加以及配置(需要啥配置啥即可，简单操作这里不做详细说明了)</li></ul><p><fancybox><img src="https://img-blog.csdnimg.cn/20181228133844976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt></fancybox></p><h3 id="4-公众号与个人号的区别"><a href="#4-公众号与个人号的区别" class="headerlink" title="4.公众号与个人号的区别"></a>4.公众号与个人号的区别</h3><p>微信公众号和个人号是完全不同的。</p><p>微信对个人号的定位是普通用户之间的交流和通讯，微信并不鼓励和支持使用个人号进行营销推广(微信曾经大规模封杀好友过多的营销个人号）。</p><p>而公众号则完全是为品牌推广、信息推送等服务而定制的。使用公众号，可以向关注者（即粉丝)群发图文消息，粉丝在对话界面看到消息后，可以点击跳转到一个图文页面。公众号还提供关键词自动回复等基础功能，以此可以随时、自动的和粉丝进行互动。</p><p>除了这些基础功能之外，更大的区别是，微信针对公众号开放了很多程序接口。在这些接口的基础上，可以向粉丝提供更多的服务。此外，认证的服务号还可以申请微信支付。粉丝可以使用微信支付向进行付款（订购服务或购买商品）。所有这些，都是个人号不具备的。</p><p>微信公众号的注册几乎是没有门槛的。不过针对不同类型的公众号，微信提供的功能不同，资质要求也不一样。</p><h1 id="二丶微信开发原理"><a href="#二丶微信开发原理" class="headerlink" title="二丶微信开发原理"></a>二丶微信开发原理</h1><p><b>公众号主要通过</b></p><ul><li>公众号消息会话</li><li>公众号内网页</li></ul><p><b>来为用户提供服务的。</b></p><ul><li><b>公众号消息会话</b></li></ul><p>公众号是以微信用户的一个联系人形式存在的，消息会话是公众号与用户交互的基础。</p><ul><li><b>公众号内网页</b></li></ul><p>许多复杂的业务场景，需要通过网页形式来提供服务。</p><ul><li><b>使用微信服务器提供的功能无法满足我们的需求</b></li></ul><p><b>设想两个场景：</b></p><p>1.公众号的消息自动回复想做的智能一些，类似于iphone的Siri，例如粉丝发送“今天的北京天气”到公众号，回复粉丝信息时要按照特定时间特定城市给予反馈;</p><p>2.公众号内嵌的网页需要获取浏览用户的微信头像、昵称、当前定位等信息</p><h2 id="模型分类"><a href="#模型分类" class="headerlink" title="模型分类"></a>模型分类</h2><h3 id="1-无扩展应用模型"><a href="#1-无扩展应用模型" class="headerlink" title="1.无扩展应用模型"></a>1.无扩展应用模型</h3><p><b>1.公众号消息会话</b><br><img src="https://img-blog.csdnimg.cn/20181228134457290.png" alt><br><b>2.公众号内网页</b><br><img src="https://img-blog.csdnimg.cn/20181228134525581.png" alt></p><h3 id="2-有扩展应用模型"><a href="#2-有扩展应用模型" class="headerlink" title="2.有扩展应用模型"></a>2.有扩展应用模型</h3><p><b>1.公众号消息会话</b><br><img src="https://img-blog.csdnimg.cn/20181228134804787.png" alt><br><b>2.公众号内网页</b><br><img src="https://img-blog.csdnimg.cn/20181228134857512.png" alt></p><h2 id="公众号接口"><a href="#公众号接口" class="headerlink" title="公众号接口"></a>公众号接口</h2><h3 id="1-公众号消息会话"><a href="#1-公众号消息会话" class="headerlink" title="1.公众号消息会话"></a>1.公众号消息会话</h3><p>目前公众号内主要有这样几类消息服务的类型，分别用于不同的场景。</p><p><b>群发消息</b></p><p>公众号可以以一定频次（订阅号为每天1次，服务号为每月4次），向用户群发消息，包括文字消息、图文消息、图片、视频、语音等。</p><p><strong>被动回复消息</strong></p><p>在用户给公众号发消息后，微信服务器会将消息发到开发者预先在开发者中心设置的服务器地址（开发者需要进行消息真实性验证），公众号可以在5秒内做出回复，可以回复一个消息，也可以回复命令告诉微信服务器这条消息暂不回复。被动回复消息可以设置加密（在公众平台官网的开发者中心处设置，设置后，按照消息加解密文档来进行处理。其他3种消息的调用因为是API调用而不是对请求的返回，所以不需要加解密）。</p><p><strong>客服消息</strong></p><p>在用户给公众号发消息后的48小时内，公众号可以给用户发送不限数量的消息，主要用于客服场景。用户的行为会触发事件推送，某些事件推送是支持公众号据此发送客服消息的，详见微信推送消息与事件说明文档。</p><p><strong>模板消息</strong></p><p>在需要对用户发送服务通知（如刷卡提醒、服务预约成功通知等）时，公众号可以用特定内容模板，主动向用户发送消息。</p><h3 id="2-公众号内网页"><a href="#2-公众号内网页" class="headerlink" title="2.公众号内网页"></a>2.公众号内网页</h3><p>对于公众号内网页，提供以下场景接口：</p><p>网页授权获取用户基本信息</p><p>通过该接口，可以获取用户的基本信息</p><p>微信JS-SDK</p><p>是开发者在网页上通过JavaScript代码使用微信原生功能的工具包，开发者可以使用它在网页上录制和播放微信语音、监听微信分享、上传手机本地图片、拍照等许多能力。</p><h3 id="3-微信开发者文档"><a href="#3-微信开发者文档" class="headerlink" title="3.微信开发者文档"></a>3.微信开发者文档</h3><p>文档链接地址：<a href="https://mp.weixin.qq.com/wiki/home/index.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki/home/index.html</a><br><fancybox><br><img src="https://img-blog.csdnimg.cn/20181228135813950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzgyNDI1,size_16,color_FFFFFF,t_70" alt><br></fancybox><br><br></p><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/85319116" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/85319116</a></p>]]></content>
      
      
      <categories>
          
          <category> WeChat开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> 微信公众号 </tag>
            
            <tag> 微信开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试用例设计总结</title>
      <link href="/2019/10/18/%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/10/18/%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-测试流程"><a href="#1-测试流程" class="headerlink" title="1.测试流程"></a>1.测试流程</h2><p>需求分析—测试需求—测试计划–测试方案—测试用例—执行测试—测试报告</p><h2 id="2-测试用例的特性"><a href="#2-测试用例的特性" class="headerlink" title="2.测试用例的特性"></a>2.测试用例的特性</h2><ul><li>有效性：能使用，不同人使用结果一致（测试用例的能够被使用，且被不同人员使用测试结果一致）</li><li>可复用性：良好的测试用例具有重复使用的功能</li><li>易组织性：好的测试用例会分门别类地提供给测试人员参考和使用</li><li>可评估性：从测试管理的角度，测试用例的通过率和软件缺陷的数目是软件产品质量好坏的测试标准（测试计划）</li><li>可管理性：测试用例可以作为检验测试人员进度、工作量以及跟踪/管理测试人员工作效率的因素（对测试人员进行工作量和绩效考核）</li></ul><h2 id="3-测试用例的八大要素"><a href="#3-测试用例的八大要素" class="headerlink" title="3.测试用例的八大要素"></a>3.测试用例的八大要素</h2><p>①测试编号<br>②测试模块<br>③测试标题<br>④测试级别<br>⑤测试环境<br>⑥测试输入<br>⑦测试步骤<br>⑧预期结果</p><ul><li><p>测试编号：每个测试用例都有唯一的标识号，用以区别其他测试用例<br><i style="color:red">例</i>：系统测试用例的编号这样定义规则： PROJECT1-ST-001 ，命名规则是项目名称＋测试阶段类型（系统测试阶段）＋编号</p></li><li><p>测试模块：指明并简单描述本测试用例是用来测试哪些项目、子项目或软件特性的<br><i style="color:red">例</i>：购物模块</p></li><li><p>测试标题：对测试用例的描述，测试用例标题应该清楚表达测试用例的用途<br><i style="color:red">例</i>：“ 测试用户登录时输入错误密码时，软件的响应情况 ”</p></li><li><p>测试级别：定义测试用例的优先级别，可以粗略地分为 “ 高 ” 和 “ 低 ” 两个级别<br><i style="color:red">例</i>： 核心功能 —高      界面风格 —低</p></li><li><p>测试环境：描述执行测试用例所需要的具体测试环境，包括硬件环境和软件环境<br><i style="color:red">例</i>： 硬件 ——计算机的具体配置，见测试计划；软件——操作系统  linux    数据库   mysql     中间件  weblogic</p></li><li><p>测试输入：用来执行测试用例的输入要求。这些输入可能是数据、文件或具体操作<br><i style="color:red">例</i>： 数据  ：  12  文件  ：   D:\baidu\文件couture         动作  ：  单击鼠标，在键盘做按键处理</p></li><li><p>测试步骤：执行本测试用例所需的每一步操作<br><i style="color:red">例</i>： 求和运算          输入加数12          输入被加数 24          点击“加法按钮”</p></li><li><p>预期结果：描述被测项目或被测特性所希望或要求达到的输出或指标<br><i style="color:red">例</i>：  加法器    12+24          预期结果：  36</p></li></ul><h2 id="4-测试用例操作步骤"><a href="#4-测试用例操作步骤" class="headerlink" title="4.测试用例操作步骤"></a>4.测试用例操作步骤</h2><p><strong>1.</strong>设计一个新的测试用例，使其尽可能多地覆盖尚未被覆盖的有效等价类，重复这个过程，直至所有的有效等价类均被测试用例所覆盖</p><p><strong>2.</strong>设计一个新的测试用例，使其仅覆盖一个无效等价类，重复这个过程，直至所有的无效等价类均被测试用例所覆盖</p><p><strong>3.</strong>设计数据要注意<br>        ①无效等价类在一个用例中只能出现一次<br>        ②有效等价类在一个用例中可以出现多次<br><strong>4.</strong>等价类划分技巧<br>        ①测试用例分析最好用xmind<br>        ②按等价类给出数据最好用电子表格<br>        ③当产生意见分歧，回看需求规格说明书</p><h2 id="5-软件测试用例方法"><a href="#5-软件测试用例方法" class="headerlink" title="5.软件测试用例方法"></a>5.软件测试用例方法</h2><p>1.输出域       覆盖所有的输出，不管输入<br>2.输入域       覆盖所有的输入，不管输出<br>3.异常分析法： 断电，断网的异常情况（重点关注）<br>4.错误猜测法： 有经验的人对系统做出判断，找到肯能出现错误的地方<br>5.探索性测试： 根据自己的测试经验，尝试性测试系统功能<br>6.因果图<br>7.场景法     流程有序<br>8.状态迁移   状态无序<br>9.正交试验   多条件组合，不予许出现负值<br>10.判定表    多条件组合，可以出现负值<br>11.边界值<br>12.等价类</p><h2 id="6-软件生存周期及其模型"><a href="#6-软件生存周期及其模型" class="headerlink" title="6.软件生存周期及其模型"></a>6.软件生存周期及其模型</h2><p>软件生存周期（Software life cycle）又称为软件生命期，生存期。是指从形成开发软件概念起，所开发的软件使用以后，知道失去使用价值消亡为止的整个过程。一般来说，整个生存周期包括计划（定义）、开发、运行（维护）三个时期，每个时期又划分为若干个阶段。每个阶段有明确的任务。</p><p><strong>周期模型（典型的几种）:</strong></p><pre><code>瀑布模型：</code></pre><p>快速原型模型：快速原型模型允许在需求分析阶段对软件的需求进行初步而非完全的分析和定义，快速设计开发出软件系统的原型，该原型向用户展示待开发软件的全部或部分功能和性能；用户对该原型进行测试评定，给出具体改进意见以丰富细化软件需求；开发人员据此对软件进行修改完善，直至用户满意认可之后，进行软件的完整实现及测试、维护。</p><pre><code>迭代模型：</code></pre><p>迭代包括产生产品发布（稳定、可执行的产品版本）的全部开发活动和要使用该发布必需的所有其他外围元素。在某种程度上，开发迭代是一次 完整地经过所有工作流程的过程：需求分析、设计、实施和测试工作流程。实质上，它类似小型的瀑布式项目。RUP认为，所有的阶段都可以细分为迭代。每一次 的迭代都会产生一个可以发布的产品，这个产品是最终产品的一个子集。</p><p><strong>生命周期阶段：</strong></p><p>　　软件计划与可行性分析</p><p>　　需求分析</p><p>　　软件设计</p><p>　　编码</p><p>　　软件测试</p><p>　　运行与维护</p><h2 id="7-什么是软件测试？软件测试的目的与原则"><a href="#7-什么是软件测试？软件测试的目的与原则" class="headerlink" title="7.什么是软件测试？软件测试的目的与原则"></a>7.什么是软件测试？软件测试的目的与原则</h2><p>在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。</p><pre><code>软件测试的目的：</code></pre><p>　　       测试是程序的执行过程，目的在于发现错误</p><p>　　       一个成功的测试用例在于发现至今未发现的错误</p><p>　　       一个成功的测试是发现了至今未发现的错误的测试</p><p>　　       确保产品完成了它所承诺或公布的功能，并且用户可以访问到的功能都有明确的书面说明。</p><p>　　       确保产品满足性能和效率的要求</p><p>　　       确保产品是健壮的和适应用户环境的</p><pre><code>软件测试的原则：</code></pre><p>　　       测试用例中一个必须部分是对预期输出或接过进行定义</p><p>　　       程序员应避免测试自己编写的程序</p><p>　　       编写软件的组织不应当测试自己编写的软件</p><p>　　       应当彻底检查每个测试的执行结果</p><p>　　       测试用例的编写不仅应当根据有效和预料到的输入情况，而且也应当根据无效和未预料到的输入情况</p><p>　　       检擦程序是否“未做其应该做的”仅是测试的一半，测试的另一半是检查程序是否“做了其不应该做的”</p><p>　　       应避免测试用例用后即弃，除非软件本身就是个一次性的软件</p><p>　　       计划测试工作时不应默许假定不会发现错误</p><p>　　       程序某部分存在更多错误的可能性，与该部分已经发现错误的数量成正比</p><p>　　       软件测试是一项极富创造性，极具智力的挑战性的工作。</p><h2 id="8-软件的安全性应从哪几个方面去测试"><a href="#8-软件的安全性应从哪几个方面去测试" class="headerlink" title="8.软件的安全性应从哪几个方面去测试"></a>8.软件的安全性应从哪几个方面去测试</h2><p>软件安全性测试包括<strong>程序、数据库安全性</strong>测试。根据系统安全指标不同测试策略也不同。<br><br><br><font color="#FF0000">用户认证安全的测试要考虑问题：</font> 明确区分系统中不同用户权限 、系统中会不会出现用户冲突 、系统会不会因用户的权限的改变造成混乱 、用户登陆密码是否是可见、可复制 、是否可以通过绝对途径登陆系统（拷贝用户登陆后的链接直接进入系统）、用户退出系统后是否删除了所有鉴权标记，是否可以使用后退键而不通过输入口令进入 系统 、系统网络安全的测试要考虑问题 、测试采取的防护措施是否正确装配好，有关系统的补丁是否打上 、模拟非授权攻击，看防护系统是否坚固 、采用成熟的网络漏洞检查工具检查系统相关漏洞（即用最专业的黑客攻击工具攻击试一下，现在最常用的是 NBSI 系列和 IPhacker IP ） 、采用各种木马检查工具检查系统木马情况 、采用各种防外挂工具检查系统各组程序的外挂漏洞.</p><p><font color="#FF0000">数据库安全考虑问题：</font> 系统数据是否机密（比如对银行系统，这一点就特别重要，一般的网站就没有太高要求）、系统数据的完整性（我刚刚结束的企业实名核查服务系统中就曾存在数据 的不完整，对于这个系统的功能实现有了障碍） 、系统数据可管理性 、系统数据的独立性 、系统数据可备份和恢复能力（数据备份是否完整，可否恢复，恢复是否可以完整）</p><h2 id="9-什么是测试用例-什么是测试脚本-两者的关系是什么？"><a href="#9-什么是测试用例-什么是测试脚本-两者的关系是什么？" class="headerlink" title="9.什么是测试用例 什么是测试脚本 两者的关系是什么？"></a>9.什么是测试用例 什么是测试脚本 两者的关系是什么？</h2><p>为实施测试而向被测试系统提供的输入数据、操作或各种环境设置以及期望结果的一个特定的集合。</p><p>测试脚本是为了进行自动化测试而编写的脚本。</p><p>测试脚本的编写必须对应相应的测试用例。</p><h2 id="10-什么是静态测试、动态测试、黑盒测试、白盒测试、α测试-β测试？"><a href="#10-什么是静态测试、动态测试、黑盒测试、白盒测试、α测试-β测试？" class="headerlink" title="10.什么是静态测试、动态测试、黑盒测试、白盒测试、α测试 β测试？"></a>10.什么是静态测试、动态测试、黑盒测试、白盒测试、α测试 β测试？</h2><p><strong>静态测试</strong>是不运行程序本身而寻找程序代码中可能存在的错误或评估程序代码的过程。</p><p><strong>动态测试</strong>是实际运行被测程序，输入相应的测试实例，检查运行结果与预期结果的差异，判定执行结果是否符合要求，从而检验程序的正确性、可靠性和有效性，并分析系统运行效率和健壮性等性能。</p><p><strong>黑盒测试</strong>一般用来确认软件功能的正确性和可操作性,目的是检测软件的各个功能是否能得以实现,把被测试的程序当作一个黑盒,不考虑其内部结构,在知道该程序的输入和输出之间的关系或程序功能的情况下,依靠软件规格说明书来确定测试用例和推断测试结果的正确性。</p><p><strong>白盒测试</strong>根据软件内部的逻辑结构分析来进行测试,是基于代码的测试，测试人员通过阅读程序代码或者通过使用开发工具中的单步调试来判断软件的质量，一般黑盒测试由项目经理在程序员开发中来实现。</p><p><strong>α测试</strong>是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的受控测试，Alpha测试不能由程序员或测试员完成。</p><p><strong>β测试</strong>是软件的多个用户在一个或多个用户的实际使用环境下进行的测试。开发者通常不在测试现场，Beta测试不能由程序员或测试员完成。</p><h2 id="11-软件产品质量特性是什么"><a href="#11-软件产品质量特性是什么" class="headerlink" title="11.软件产品质量特性是什么?"></a>11.软件产品质量特性是什么?</h2><p><strong>功能性：</strong>适应性、准确性、互操作性、依从性、安全性。</p><p><strong>可靠性：</strong>成熟性、容错性、易恢复性。</p><p><strong>可使用性：</strong>易理解性、易学习性、易操作性。</p><p><strong>效率：</strong>时间特性、资源特性。</p><p><strong>可维护性：</strong>易分析性、易变更性、稳定性、易测试性。</p><p><strong>可移植性：</strong>适应性、易安装性、遵循性、易替换性</p><h2 id="12-软件测试分为几个阶段-各阶段的测试策略和要求是什么"><a href="#12-软件测试分为几个阶段-各阶段的测试策略和要求是什么" class="headerlink" title="12.软件测试分为几个阶段 各阶段的测试策略和要求是什么?"></a>12.软件测试分为几个阶段 各阶段的测试策略和要求是什么?</h2><p>和开发过程相对应，测试过程会依次经历单元测试、集成测试、系统测试、验收测试</p><pre><code>四个主要阶段：</code></pre><p><font color="#FF0000">单元测试：</font>单元测试是针对软件设计的最小单位––程序模块甚至代码段进行正确性检验的测试工作，通常由开发人员进行。</p><p><font color="#FF0000">集成测试：</font>集成测试是将模块按照设计要求组装起来进行测试，主要目的是发现与接口有关的问题。由于在产品提交到测试部门前，产品开发小组都要进行联合调试，因此在大部分企业中集成测试是由开发人员来完成的。</p><p><font color="#FF0000">系统测试：</font>系统测试是在集成测试通过后进行的，目的是充分运行系统，验证各子系统是否都能正常工作并完成设计的要求。它主要由测试部门进行，是测试部门最大最重要的一个测试，对产品的质量有重大的影响。</p><p><font color="#FF0000">验收测试：</font>验收测试以需求阶段的《需求规格说明书》为验收标准，测试时要求模拟实际用户的运行环境。对于实际项目可以和客户共同进行，对于产品来说就是最后一次的系统测试。测试内容为对功能模块的全面测试，尤其要进行文档测试。</p><pre><code>单元测试测试策略：</code></pre><p><strong>自顶向下</strong>的单元测试策略：比孤立单元测试的成本高很多，不是单元测试的一个好的选择。</p><p><strong>自底向上</strong>的单元测试策略：比较合理的单元测试策略，但测试周期较长。</p><p><strong>孤立</strong>的单元测试策略：最好的单元测试策略。</p><pre><code>集成测试的测试策略：</code></pre><p><strong>大爆炸集成</strong>：适应于一个维护型项目或被测试系统较小</p><p><strong>自顶向下集成</strong>：适应于产品控制结构比较清晰和稳定；高层接口变化较小；底层接口未定义或经常可能被修改；产口控制组件具有较大的技术风险，需要尽早被验证；希望尽早能看到产品的系统功能行为。</p><p><strong>自底向上集成</strong>：适应于底层接口比较稳定；高层接口变化比较频繁；底层组件较早被完成。</p><p><strong>基于进度的集成</strong></p><p><em>优点</em>：具有较高的并行度；能够有效缩短项目的开发进度。</p><p><em>缺点</em>：桩和驱动工作量较大；有些接口测试不充分；有些测试重复和浪费。</p><pre><code>系统测试的测试策略：</code></pre><p>数据和数据库完整性测试；功能测试；用户界面测试；性能评测；负载测试；强度测试；容量测试；安全性和访问控制测试；故障转移和恢复测试；配置测试；安装测试；加密测试；可用性测试；版本验证测试；文档测试</p><h2 id="13-软件测试各个阶段通常完成什么工作？"><a href="#13-软件测试各个阶段通常完成什么工作？" class="headerlink" title="13.软件测试各个阶段通常完成什么工作？"></a>13.软件测试各个阶段通常完成什么工作？</h2><p><font color="#FF0000">单元测试阶段：</font>各独立单元模块在与系统地其他部分相隔离的情况下进行测试，单元测试针对每一个程序模块进行正确性校验，检查各个程序模块是否正确地实现了规定的功能。生成单元测试报告，提交缺陷报告。</p><p><font color="#FF0000">集成测试阶段：</font>集成测试是在单元测试的基础上，测试在将所有的软件单元按照概要设计规格说明的要求组装成模块、子系统或系统的过程中各部分工作是否达到或实现相应技术指标及要求的活动。该阶段生成集成测试报告，提交缺陷报告。</p><p><font color="#FF0000">系统测试阶段：</font>将通过确认测试的软件，作为整个给予计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行环境下，对计算机系统进行全面的功能覆盖。该阶段需要提交测试总结和缺陷报告。</p><h2 id="14-测试人员在软件开发过程中的任务是什么？"><a href="#14-测试人员在软件开发过程中的任务是什么？" class="headerlink" title="14.测试人员在软件开发过程中的任务是什么？"></a>14.测试人员在软件开发过程中的任务是什么？</h2><p>1、尽可能早的找出系统中的Bug；</p><p>2、避免软件开发过程中缺陷的出现；</p><p>3、衡量软件的品质，保证系统的质量；</p><p>4、关注用户的需求，并保证系统符合用户需求。</p><p>总的目标是：确保软件的质量。</p><h2 id="15-一条软件缺陷（或者叫Bug）记录都包含了哪些内容？"><a href="#15-一条软件缺陷（或者叫Bug）记录都包含了哪些内容？" class="headerlink" title="15.一条软件缺陷（或者叫Bug）记录都包含了哪些内容？"></a>15.一条软件缺陷（或者叫Bug）记录都包含了哪些内容？</h2><p>一条Bug记录最基本应包含：</p><p>bug编号；</p><p>bug严重级别，优先级；</p><p>bug产生的模块；</p><p>首先要有bug摘要，阐述bug大体的内容；</p><p>bug对应的版本；</p><p>bug详细现象描述，包括一些截图、录像….等等；</p><p>bug出现时的测试环境，产生的条件即对应操作步骤；</p><h2 id="16-黑盒测试和白盒测试的优缺点"><a href="#16-黑盒测试和白盒测试的优缺点" class="headerlink" title="16.黑盒测试和白盒测试的优缺点"></a>16.黑盒测试和白盒测试的优缺点</h2><p>黑盒测试的优点有：比较简单，不需要了解程序内部的代码及实现；与软件的内部实现无关；  从用户角度出发，能很容易的知道用户会用到哪些功能，会遇到哪些问题；基于软件开发文档，所以也能知道软件实现了文档中的哪些功能；在做软件自动化测试时较为方便。</p><p>黑盒测试的缺点有：不可能覆盖所有的代码，覆盖率较低，大概只能达到总代码量的30%；自动化测试的复用性较低。</p><p>白盒测试的优点有：帮助软件测试人员增大代码的覆盖率，提高代码的质量，发现代码中隐藏的问题。</p><p>白盒测试的缺点有：程序运行会有很多不同的路径，不可能测试所有的运行路径；测试基于代码，只能测试开发人员做的对不对，而不能知道设计的正确与否，可能会漏掉一些功能需求；系统庞大时，测试开销会非常大。</p><h2 id="17-如何测试一个纸杯？"><a href="#17-如何测试一个纸杯？" class="headerlink" title="17.如何测试一个纸杯？"></a>17.如何测试一个纸杯？</h2><p>功能度：用水杯装水看漏不漏；水能不能被喝到</p><p>安全性：杯子有没有毒或细菌</p><p>可靠性：杯子从不同高度落下的损坏程度</p><p>可移植性：杯子在不同的地方、温度等环境下是否都可以正常使用</p><p>兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等</p><p>易用性：杯子是否烫手、是否有防滑措施、是否方便饮用</p><p>用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述</p><p>疲劳测试：将杯子盛上水（案例一）放24小时检查泄漏时间和情况；盛上汽油（案例二）放24小时检查泄漏时间和情况等</p><p>压力测试：用根针并在针上面不断加重量，看压强多大时会穿透</p><h2 id="18-详细的描述一个测试活动完整的过程"><a href="#18-详细的描述一个测试活动完整的过程" class="headerlink" title="18.详细的描述一个测试活动完整的过程"></a>18.详细的描述一个测试活动完整的过程</h2><p>1.项目经理通过和客户的交流，完成需求文档，由开发人员和测试人员共同完成需求文档的评审，评审的内容包括：需求描述不清楚的地方和可能有明显冲突或者无法实现的功能的地方。项目经理通过综合开发人员，测试人员以及客户的意见，完成项目计划。然后SQA(软件质量保证)进入项目，开始进行统计和跟踪。</p><p>2.开发人员根据需求文档完成需求分析文档，测试人员进行评审，评审的主要内容包括是否有遗漏或双方理解不同的地方。测试人员完成测试计划文档，测试计划包括的内容上面有描述。</p><p>3.测试人员根据修改好的需求分析文档开始写测试用例，同时开发人员完成概要设计文档，详细设计文档。此两份文档成为测试人员撰写测试用例的补充材料。</p><p>4.测试用例完成后，测试和开发需要进行评审。</p><p>5.测试人员搭建环境</p><p>6.开发人员提交第一个版本，可能存在未完成功能，需要说明。测试人员进行测试，发现BUG后提交给BugZilla。</p><p>7.开发提交第二个版本，包括Bug Fix以及增加了部分功能，测试人员进行测试。</p><p>8.重复上面的工作，一般是3-4个版本后BUG数量减少，达到出货的要求。</p><p>9.如果有客户反馈的问题，需要测试人员协助重现并重新测试。<br><br></p><p>————————————————<br>版权声明：本文为CSDN博主「cdtaogang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41782425/article/details/96853248" target="_blank" rel="noopener">https://blog.csdn.net/qq_41782425/article/details/96853248</a></p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试流程 </tag>
            
            <tag> 用例特性 </tag>
            
            <tag> 用例要素 </tag>
            
            <tag> 用例步骤 </tag>
            
            <tag> 用例方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章加密测试</title>
      <link href="/2019/10/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('别搞了，你破解不了的');const txt = document.getElementById('enc_content').innerHTML;// alert(txt,"1")// alert(pwd,"2")// alert(onError,"3")let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);if(plaintext == ""){document.getElementById("enc_pwd_input").value="";document.getElementById("enc_error").innerHTML = "密码错误!";return}// alert(plaintext)} catch(err) {if(onError) {// alert(onError,"4")// alert(err,"5")onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">U2FsdGVkX19ri23HNNLut23YlmyTmQ0ON2c+fBX1OWoHpJc/7enlyy0XNdqkHhlCkhinm2TQq6IBJI8yYf2tuADociXZWiGJqyz7SkbUtTwsjnSnziUah9azaJRFX5faBYnH4M8tjl+fSj/RND3xY07Qql1IPvVr8G7nVNNEdHMkrCtCq+HrfyX6ZEuurgON</div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" placeholder="请输入文章密码" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "密码错误!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
